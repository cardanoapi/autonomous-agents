version: '3.8'

services:

  # Frontend
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_MANAGER_BASE_DOMAIN=${NEXT_PUBLIC_MANAGER_BASE_DOMAIN}
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
        - NEXT_PUBLIC_NETWORK_NAME=${NEXT_PUBLIC_NETWORK_NAME}
        - NEXT_PUBLIC_DOCKER_NETWORK_NAME=${DOCKER_NETWORK_NAME}
        - NEXT_PUBLIC_AGENT_NODE_DOCKER_IMAGE_NAME=${AGENT_NODE_DOCKER_IMAGE_NAME}
    ports: 
      - "3000:3000"
    networks:
      - autonomous-agent


  # FastAPI application (build the image)
  api:
    build: ./api  # Path to your FastAPI project directory
    ports:
      - "8000:8000"
    environment:
      - DOCS_URL=${DOCS_URL}
      - KAFKA_ENABLED=${KAFKA_ENABLED}
      - METADATA_BASE_URL=${METADATA_BASE_URL}
      - DB_SYNC_BASE_URL=${DB_SYNC_BASE_URL}
      - KAFKA_PREFIX=${KAFKA_PREFIX}
      - DATABASE_URL=${DATABASE_URL}
      - KAFKA_BROKERS=${KAFKA_BROKERS}
      - AGENT_MNEMONIC=${AGENT_MNEMONIC}
    restart: on-failure:3
    depends_on:
      - postgres
      - kafka
    networks:
      - autonomous-agent

  # Agent Manager application (build image)
  agent_manager:
    build:
      context: ./agent-manager
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    restart: on-failure:3
    depends_on:
      - postgres
      - kafka
      - api
    environment:
      - CLIENT_ID=${CLIENT_ID}
      - CARDANO_NODE_URL=${CARDANO_NODE_URL}
      - KUBER_BASE_URL=${KUBER_BASE_URL}
      - KUBER_API_KEY=${KUBER_API_KEY}
      - MANAGER_WALLET_ADDRESS=${MANAGER_WALLET_ADDRESS}
      - MANAGER_WALLET_SIGNING_KEY=${MANAGER_WALLET_SIGNING_KEY}
      - FAUCET_API_KEY=${FAUCET_API_KEY}
      - CARDANO_NETWORK_MAGIC=${CARDANO_NETWORK_MAGIC}
      - BLOCKFROST_API_KEY=${BLOCKFROST_API_KEY}
      - ENABLE_BLOCKFROST_SUBMIT_API=${ENABLE_BLOCKFROST_SUBMIT_API}
      - NETWORK_NAME=${NETWORK_NAME}
      - KAFKA_PREFIX=${KAFKA_PREFIX}
      - DATABASE_URL=${DATABASE_URL}
      - KAFKA_BROKERS=${KAFKA_BROKERS}
      - AGENT_MNEMONIC=${AGENT_MNEMONIC}
    networks:
      - autonomous-agent

# DbSync
  dbsync:
    build:
      context: ./dbsync-api
      dockerfile: Dockerfile
    ports:
      - "9000:9000"
    environment:
      - PORT=${DBSYNC_PORT}
      - CORS_ENABLE=${DBSYNC_CORS_ENABLE}
      - DATABASE_URL=${DBSYNC_DATABASE_URL}

    networks:
      - autonomous-agent

  agent-node:
    build:
      context: ./agent-node
      dockerfile: Dockerfile
    image: ${AGENT_NODE_DOCKER_IMAGE_NAME}

  #Database
  postgres:
    image: postgres:16.2
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pg-data:/var/lib/postgresql/data
    networks:
      - autonomous-agent

  #Zookeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper_agent_autonomous
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=${ZOOKEEPER_CLIENT_PORT}
      - ZOOKEEPER_TICK_TIME=${ZOOKEEPER_TICK_TIME}
      - ZOOKEEPER_SYNC_LIMIT=${ZOOKEEPER_SYNC_LIMIT}
    networks:
      - autonomous-agent

  #Kafka
  kafka:
    image: confluentinc/cp-kafka:7.0.1
    hostname: kafka
    container_name: kafka_agent_autonomous
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_BROKER_ID=${KAFKA_BROKER_ID}
      - KAFKA_ZOOKEEPER_CONNECT=${KAFKA_ZOOKEEPER_CONNECT}
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      - KAFKA_ADVERTISED_LISTENERS=${KAFKA_ADVERTISED_LISTENERS}
      - KAFKA_INTER_BROKER_LISTENER_NAME=${KAFKA_INTER_BROKER_LISTENER_NAME}
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=${KAFKA_TRANSACTION_STATE_LOG_MIN_ISR}
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=${KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=${KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS}
      - KAFKA_JMX_PORT=${KAFKA_JMX_PORT}
      - KAFKA_CREATE_TOPICS=${KAFKA_CREATE_TOPICS}
    networks:
      - autonomous-agent


networks:
  autonomous-agent:
    name: ${DOCKER_NETWORK_NAME}
    driver: bridge

volumes:
  pg-data: