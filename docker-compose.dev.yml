version: '3.8'

services:

  # Frontend
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports: 
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_ENDPOINT_HOST=http://api:8000/api
      - NEXT_PUBLIC_NETWORK_NAME=sanchonet


  # FastAPI application (build the image)
  api:
    build: ./api  # Path to your FastAPI project directory
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://root:root@postgres:5432/cardano_autonomous_agent_testing_db
      - KAFKA_BROKERS=kafka:9093
      - DOCS_URL=/api/docs
      - AGENT_MNEMONIC='group shadow belt culture garage sport demand target twist tribe milk dumb divide mango bench fantasy okay unfair error twice struggle naive squirrel romance'
      - KAFKA_ENABLED='True'
      - METADATA_API='https://metadata.drep.id/api'
      - DB_SYNC_API='https://dbsyncapi.agents.cardanoapi.io/api'
    depends_on:
      - postgres
      - kafka
      - pgadmin

  # Agent Manager application (build image)
  agent_manager:
    build:
      context: ./agent-manager
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - kafka
      - api
    environment:
      - DATABASE_URL=postgresql://root:root@postgres:5432/cardano_autonomous_agent_testing_db
      - KAFKA_BROKERS=kafka:9093
      - CLIENT_ID=my-app
      - CARDANO_NODE_URL=172.31.0.4:3004
      - KUBER_BASE_URL='https://sanchonet.kuber.cardanoapi.io'
      - KUBER_API_KEY='l3HSdpCx86BOZFEvHspmYZ8KiVOnnvJDLKkC7JMVKUu9pZlV0Ld0qbn3pTQ3ER'
      - MANAGER_WALLET_ADDRESS=addr_test1qrd3hs7rlxwwdzthe6hj026dmyt3y0heuulctscyydh2kguh4xfmpjqkd25vfq69hcvj27jqyk4hvnyxu7vma2c4kvps8eh2m3
      - MANAGER_WALLET_SIGNING_KEY=addr_sk14wrrctnv9cyr05vjnwrjcs7mujzuxf4zj5nm7fna5nx7fxrnrupqwhwycx
      - FAUCET_API_KEY=ayEO6dlVF18oTslr9eIMUNgE35GqVfFz
      - AGENT_MNEMONIC='group shadow belt culture garage sport demand target twist tribe milk dumb divide mango bench fantasy okay unfair error twice struggle naive squirrel romance'
      - METADATA_BASE_URL='https://metadata.drep.id'
      - DB_SYNC_BASE_URL='https://dbsyncapi.agents.cardanoapi.io/api'
      - CARDANO_NETWORK_MAGIC=4
      - BLOCKFROST_API_KEY='sanchonetWC2xdJbuASgECPHevRkMkh6QQqJf2nve'
      - ENABLE_BLOCKFROST_SUBMIT_API='True'
      - SERVER_PORT=3002
      - NETWORK_NAME='sanchonet'

#  #Agent (build image)
#  agent:
#    build:
#      context: ./agent-node
#      dockerfile: Dockerfile
#    ports:
#      - "3002:3002"
#    depends_on:
#      - agent_manager
#    environment:
#      - WS_URL=  # Use service name as hostname within Docker network
#      - AGENT_ID= # Provide the agent ID as needed

  #Database
  postgres:
    image: postgres:16.2
    environment:
     POSTGRES_DB: cardano_autonomous_agent_testing_db
     POSTGRES_USER: root
     POSTGRES_PASSWORD: root
    ports:
      - "5432:5432"
    volumes:
      - pg-data:/var/lib/postgresql/data

  #Pgadmin
  pgadmin:
    image: dpage/pgadmin4:8.2
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@pgadmin.com
      PGADMIN_DEFAULT_PASSWORD: password
    ports:
      - "5050:80"

#Zookeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2

 #Kafka
  kafka:
    image: confluentinc/cp-kafka:7.0.1
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_NET:PLAINTEXT,HOST_NET:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS:  DOCKER_NET://kafka:9093,HOST_NET://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_NET
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9999
      KAFKA_CREATE_TOPICS: "trigger_config_updates:1:1"

#Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui
    ports:
      - "8080:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka:9093


volumes:
  pg-data: