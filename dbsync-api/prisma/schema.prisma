generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ada_pots {
  id                BigInt  @id @default(autoincrement())
  slot_no           BigInt
  epoch_no          Int
  treasury          Decimal @db.Decimal(20, 0)
  reserves          Decimal @db.Decimal(20, 0)
  rewards           Decimal @db.Decimal(20, 0)
  utxo              Decimal @db.Decimal(20, 0)
  deposits_stake    Decimal @db.Decimal(20, 0)
  fees              Decimal @db.Decimal(20, 0)
  block_id          BigInt
  deposits_drep     Decimal @db.Decimal(20, 0)
  deposits_proposal Decimal @db.Decimal(20, 0)
}

model block {
  id              BigInt   @id @default(autoincrement())
  hash            Bytes    @unique(map: "unique_block")
  epoch_no        Int?
  slot_no         BigInt?
  epoch_slot_no   Int?
  block_no        Int?
  previous_id     BigInt?
  slot_leader_id  BigInt
  size            Int
  time            DateTime @db.Timestamp(6)
  tx_count        BigInt
  proto_major     Int
  proto_minor     Int
  vrf_key         String?  @db.VarChar
  op_cert         Bytes?
  op_cert_counter BigInt?

  @@index([block_no], map: "idx_block_block_no")
  @@index([epoch_no], map: "idx_block_epoch_no")
  @@index([previous_id], map: "idx_block_previous_id")
  @@index([slot_leader_id], map: "idx_block_slot_leader_id")
  @@index([slot_no], map: "idx_block_slot_no")
  @@index([time], map: "idx_block_time")
}

model collateral_tx_in {
  id           BigInt @id @default(autoincrement())
  tx_in_id     BigInt
  tx_out_id    BigInt
  tx_out_index Int    @db.SmallInt

  @@index([tx_out_id], map: "idx_collateral_tx_in_tx_out_id")
}

model collateral_tx_out {
  id                  BigInt  @id @default(autoincrement())
  tx_id               BigInt
  index               Int     @db.SmallInt
  address             String  @db.VarChar
  address_has_script  Boolean
  payment_cred        Bytes?
  stake_address_id    BigInt?
  value               Decimal @db.Decimal(20, 0)
  data_hash           Bytes?
  multi_assets_descr  String  @db.VarChar
  inline_datum_id     BigInt?
  reference_script_id BigInt?

  @@index([inline_datum_id])
  @@index([reference_script_id])
  @@index([stake_address_id])
}

model committee {
  id                     BigInt             @id @default(autoincrement())
  gov_action_proposal_id BigInt?
  quorum_numerator       BigInt
  quorum_denominator     BigInt
  committee_member       committee_member[]
}

model committee_de_registration {
  id               BigInt  @id @default(autoincrement())
  tx_id            BigInt
  cert_index       Int
  voting_anchor_id BigInt?
  cold_key_id      BigInt
}

model committee_hash {
  id         BigInt  @id @default(autoincrement())
  raw        Bytes
  has_script Boolean

  @@unique([raw, has_script], map: "unique_committee_hash")
}

model committee_member {
  id                BigInt    @id @default(autoincrement())
  committee_id      BigInt
  committee_hash_id BigInt
  expiration_epoch  Int
  committee         committee @relation(fields: [committee_id], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([committee_id], map: "idx_committee_member_committee_id")
}

model committee_registration {
  id          BigInt @id @default(autoincrement())
  tx_id       BigInt
  cert_index  Int
  cold_key_id BigInt
  hot_key_id  BigInt
}

model constitution {
  id                     BigInt  @id @default(autoincrement())
  gov_action_proposal_id BigInt?
  voting_anchor_id       BigInt
  script_hash            Bytes?
}

model cost_model {
  id    BigInt @id @default(autoincrement())
  costs Json
  hash  Bytes  @unique(map: "unique_cost_model")
}

model datum {
  id    BigInt @id @default(autoincrement())
  hash  Bytes  @unique(map: "unique_datum")
  tx_id BigInt
  value Json?
  bytes Bytes

  @@index([tx_id], map: "idx_datum_tx_id")
}

model delegation {
  id              BigInt  @id @default(autoincrement())
  addr_id         BigInt
  cert_index      Int
  pool_hash_id    BigInt
  active_epoch_no BigInt
  tx_id           BigInt
  slot_no         BigInt
  redeemer_id     BigInt?

  @@index([active_epoch_no], map: "idx_delegation_active_epoch_no")
  @@index([addr_id], map: "idx_delegation_addr_id")
  @@index([pool_hash_id], map: "idx_delegation_pool_hash_id")
  @@index([redeemer_id], map: "idx_delegation_redeemer_id")
  @@index([tx_id], map: "idx_delegation_tx_id")
}

model delegation_vote {
  id           BigInt  @id @default(autoincrement())
  addr_id      BigInt
  cert_index   Int
  drep_hash_id BigInt
  tx_id        BigInt
  redeemer_id  BigInt?
}

model delisted_pool {
  id       BigInt @id @default(autoincrement())
  hash_raw Bytes  @unique(map: "unique_delisted_pool")
}

model drep_distr {
  id           BigInt @id @default(autoincrement())
  hash_id      BigInt
  amount       BigInt
  epoch_no     Int
  active_until Int?

  @@unique([hash_id, epoch_no], map: "unique_drep_distr")
}

model drep_hash {
  id         BigInt  @id @default(autoincrement())
  raw        Bytes?
  view       String  @db.VarChar
  has_script Boolean

  @@unique([raw, has_script], map: "unique_drep_hash")
}

model drep_registration {
  id               BigInt  @id @default(autoincrement())
  tx_id            BigInt
  cert_index       Int
  deposit          BigInt?
  drep_hash_id     BigInt
  voting_anchor_id BigInt?
}

model epoch {
  id         BigInt   @id @default(autoincrement())
  out_sum    Decimal  @db.Decimal(39, 0)
  fees       Decimal  @db.Decimal(20, 0)
  tx_count   Int
  blk_count  Int
  no         Int      @unique(map: "unique_epoch")
  start_time DateTime @db.Timestamp(6)
  end_time   DateTime @db.Timestamp(6)

  @@index([no], map: "idx_epoch_no")
}

model epoch_param {
  id                               BigInt   @id @default(autoincrement())
  epoch_no                         Int
  min_fee_a                        Int
  min_fee_b                        Int
  max_block_size                   Int
  max_tx_size                      Int
  max_bh_size                      Int
  key_deposit                      Decimal  @db.Decimal(20, 0)
  pool_deposit                     Decimal  @db.Decimal(20, 0)
  max_epoch                        Int
  optimal_pool_count               Int
  influence                        Float
  monetary_expand_rate             Float
  treasury_growth_rate             Float
  decentralisation                 Float
  protocol_major                   Int
  protocol_minor                   Int
  min_utxo_value                   Decimal  @db.Decimal(20, 0)
  min_pool_cost                    Decimal  @db.Decimal(20, 0)
  nonce                            Bytes?
  cost_model_id                    BigInt?
  price_mem                        Float?
  price_step                       Float?
  max_tx_ex_mem                    Decimal? @db.Decimal(20, 0)
  max_tx_ex_steps                  Decimal? @db.Decimal(20, 0)
  max_block_ex_mem                 Decimal? @db.Decimal(20, 0)
  max_block_ex_steps               Decimal? @db.Decimal(20, 0)
  max_val_size                     Decimal? @db.Decimal(20, 0)
  collateral_percent               Int?
  max_collateral_inputs            Int?
  block_id                         BigInt
  extra_entropy                    Bytes?
  coins_per_utxo_size              Decimal? @db.Decimal(20, 0)
  pvt_motion_no_confidence         Float?
  pvt_committee_normal             Float?
  pvt_committee_no_confidence      Float?
  pvt_hard_fork_initiation         Float?
  dvt_motion_no_confidence         Float?
  dvt_committee_normal             Float?
  dvt_committee_no_confidence      Float?
  dvt_update_to_constitution       Float?
  dvt_hard_fork_initiation         Float?
  dvt_p_p_network_group            Float?
  dvt_p_p_economic_group           Float?
  dvt_p_p_technical_group          Float?
  dvt_p_p_gov_group                Float?
  dvt_treasury_withdrawal          Float?
  committee_min_size               Decimal? @db.Decimal(20, 0)
  committee_max_term_length        Decimal? @db.Decimal(20, 0)
  gov_action_lifetime              Decimal? @db.Decimal(20, 0)
  gov_action_deposit               Decimal? @db.Decimal(20, 0)
  drep_deposit                     Decimal? @db.Decimal(20, 0)
  drep_activity                    Decimal? @db.Decimal(20, 0)
  pvtpp_security_group             Float?
  min_fee_ref_script_cost_per_byte Float?

  @@index([block_id], map: "idx_epoch_param_block_id")
  @@index([cost_model_id], map: "idx_epoch_param_cost_model_id")
}

model epoch_stake {
  id       BigInt  @id @default(autoincrement())
  addr_id  BigInt
  pool_id  BigInt
  amount   Decimal @db.Decimal(20, 0)
  epoch_no Int

  @@unique([epoch_no, addr_id, pool_id], map: "unique_epoch_stake")
  @@unique([epoch_no, addr_id, pool_id], map: "unique_stake")
  @@index([addr_id], map: "idx_epoch_stake_addr_id")
  @@index([epoch_no], map: "idx_epoch_stake_epoch_no")
  @@index([pool_id], map: "idx_epoch_stake_pool_id")
}

model epoch_stake_progress {
  id        BigInt  @id @default(autoincrement())
  epoch_no  Int     @unique(map: "unique_epoch_stake_progress")
  completed Boolean
}

model epoch_state {
  id               BigInt  @id @default(autoincrement())
  committee_id     BigInt?
  no_confidence_id BigInt?
  constitution_id  BigInt?
  epoch_no         Int
}

model epoch_sync_time {
  id      BigInt        @id @default(autoincrement())
  no      BigInt        @unique(map: "unique_epoch_sync_time")
  seconds BigInt
  state   syncstatetype
}

model event_info {
  id          BigInt  @id @default(autoincrement())
  tx_id       BigInt?
  epoch       Int
  type        String  @db.VarChar
  explanation String? @db.VarChar
}

model extra_key_witness {
  id    BigInt @id @default(autoincrement())
  hash  Bytes
  tx_id BigInt

  @@index([tx_id], map: "idx_extra_key_witness_tx_id")
}

model extra_migrations {
  id          BigInt  @id @default(autoincrement())
  token       String  @db.VarChar
  description String? @db.VarChar
}

model gov_action_proposal {
  id                       BigInt        @id @default(autoincrement())
  tx_id                    BigInt
  index                    BigInt
  prev_gov_action_proposal BigInt?
  deposit                  Decimal       @db.Decimal(20, 0)
  return_address           BigInt
  expiration               Int?
  voting_anchor_id         BigInt?
  type                     govactiontype
  description              Json
  param_proposal           BigInt?
  ratified_epoch           Int?
  enacted_epoch            Int?
  dropped_epoch            Int?
  expired_epoch            Int?
}

model ma_tx_mint {
  id       BigInt  @id @default(autoincrement())
  quantity Decimal @db.Decimal(20, 0)
  tx_id    BigInt
  ident    BigInt

  @@index([tx_id], map: "idx_ma_tx_mint_tx_id")
}

model ma_tx_out {
  id        BigInt  @id @default(autoincrement())
  quantity  Decimal @db.Decimal(20, 0)
  tx_out_id BigInt
  ident     BigInt

  @@index([tx_out_id], map: "idx_ma_tx_out_tx_out_id")
}

model meta {
  id           BigInt   @id @default(autoincrement())
  start_time   DateTime @unique(map: "unique_meta") @db.Timestamp(6)
  network_name String   @db.VarChar
  version      String   @db.VarChar
}

model multi_asset {
  id          BigInt @id @default(autoincrement())
  policy      Bytes
  name        Bytes
  fingerprint String @db.VarChar

  @@unique([policy, name], map: "unique_multi_asset")
}

model new_committee {
  id                     BigInt @id @default(autoincrement())
  gov_action_proposal_id BigInt
  deleted_members        String @db.VarChar
  added_members          String @db.VarChar
  quorum_numerator       BigInt
  quorum_denominator     BigInt
}

model off_chain_pool_data {
  id          BigInt @id @default(autoincrement())
  pool_id     BigInt
  ticker_name String @db.VarChar
  hash        Bytes
  json        Json
  bytes       Bytes
  pmr_id      BigInt

  @@unique([pool_id, pmr_id], map: "unique_off_chain_pool_data")
  @@index([pmr_id], map: "idx_off_chain_pool_data_pmr_id")
}

model off_chain_pool_fetch_error {
  id          BigInt   @id @default(autoincrement())
  pool_id     BigInt
  fetch_time  DateTime @db.Timestamp(6)
  pmr_id      BigInt
  fetch_error String   @db.VarChar
  retry_count Int

  @@unique([pool_id, fetch_time, retry_count], map: "unique_off_chain_pool_fetch_error")
  @@index([pmr_id], map: "idx_off_chain_pool_fetch_error_pmr_id")
}

model off_chain_vote_author {
  id                     BigInt  @id @default(autoincrement())
  off_chain_vote_data_id BigInt
  name                   String? @db.VarChar
  witness_algorithm      String  @db.VarChar
  public_key             String  @db.VarChar
  signature              String  @db.VarChar
  warning                String? @db.VarChar
}

model off_chain_vote_data {
  id               BigInt   @id @default(autoincrement())
  voting_anchor_id BigInt
  hash             Bytes
  json             Json
  bytes            Bytes
  warning          String?  @db.VarChar
  language         String   @db.VarChar
  comment          String?  @db.VarChar
  is_valid         Boolean?

  @@unique([voting_anchor_id, hash], map: "unique_off_chain_vote_data")
}

model off_chain_vote_drep_data {
  id                     BigInt  @id @default(autoincrement())
  off_chain_vote_data_id BigInt
  payment_address        String? @db.VarChar
  given_name             String  @db.VarChar
  objectives             String? @db.VarChar
  motivations            String? @db.VarChar
  qualifications         String? @db.VarChar
  image_url              String? @db.VarChar
  image_hash             String? @db.VarChar
}

model off_chain_vote_external_update {
  id                     BigInt @id @default(autoincrement())
  off_chain_vote_data_id BigInt
  title                  String @db.VarChar
  uri                    String @db.VarChar
}

model off_chain_vote_fetch_error {
  id               BigInt   @id @default(autoincrement())
  voting_anchor_id BigInt
  fetch_error      String   @db.VarChar
  fetch_time       DateTime @db.Timestamp(6)
  retry_count      Int

  @@unique([voting_anchor_id, retry_count], map: "unique_off_chain_vote_fetch_error")
}

model off_chain_vote_gov_action_data {
  id                     BigInt @id @default(autoincrement())
  off_chain_vote_data_id BigInt
  title                  String @db.VarChar
  abstract               String @db.VarChar
  motivation             String @db.VarChar
  rationale              String @db.VarChar
}

model off_chain_vote_reference {
  id                     BigInt  @id @default(autoincrement())
  off_chain_vote_data_id BigInt
  label                  String  @db.VarChar
  uri                    String  @db.VarChar
  hash_digest            String? @db.VarChar
  hash_algorithm         String? @db.VarChar
}

model param_proposal {
  id                               BigInt   @id @default(autoincrement())
  epoch_no                         Int?
  key                              Bytes?
  min_fee_a                        Decimal? @db.Decimal(20, 0)
  min_fee_b                        Decimal? @db.Decimal(20, 0)
  max_block_size                   Decimal? @db.Decimal(20, 0)
  max_tx_size                      Decimal? @db.Decimal(20, 0)
  max_bh_size                      Decimal? @db.Decimal(20, 0)
  key_deposit                      Decimal? @db.Decimal(20, 0)
  pool_deposit                     Decimal? @db.Decimal(20, 0)
  max_epoch                        Decimal? @db.Decimal(20, 0)
  optimal_pool_count               Decimal? @db.Decimal(20, 0)
  influence                        Float?
  monetary_expand_rate             Float?
  treasury_growth_rate             Float?
  decentralisation                 Float?
  entropy                          Bytes?
  protocol_major                   Int?
  protocol_minor                   Int?
  min_utxo_value                   Decimal? @db.Decimal(20, 0)
  min_pool_cost                    Decimal? @db.Decimal(20, 0)
  cost_model_id                    BigInt?
  price_mem                        Float?
  price_step                       Float?
  max_tx_ex_mem                    Decimal? @db.Decimal(20, 0)
  max_tx_ex_steps                  Decimal? @db.Decimal(20, 0)
  max_block_ex_mem                 Decimal? @db.Decimal(20, 0)
  max_block_ex_steps               Decimal? @db.Decimal(20, 0)
  max_val_size                     Decimal? @db.Decimal(20, 0)
  collateral_percent               Int?
  max_collateral_inputs            Int?
  registered_tx_id                 BigInt
  coins_per_utxo_size              Decimal? @db.Decimal(20, 0)
  pvt_motion_no_confidence         Float?
  pvt_committee_normal             Float?
  pvt_committee_no_confidence      Float?
  pvt_hard_fork_initiation         Float?
  dvt_motion_no_confidence         Float?
  dvt_committee_normal             Float?
  dvt_committee_no_confidence      Float?
  dvt_update_to_constitution       Float?
  dvt_hard_fork_initiation         Float?
  dvt_p_p_network_group            Float?
  dvt_p_p_economic_group           Float?
  dvt_p_p_technical_group          Float?
  dvt_p_p_gov_group                Float?
  dvt_treasury_withdrawal          Float?
  committee_min_size               Decimal? @db.Decimal(20, 0)
  committee_max_term_length        Decimal? @db.Decimal(20, 0)
  gov_action_lifetime              Decimal? @db.Decimal(20, 0)
  gov_action_deposit               Decimal? @db.Decimal(20, 0)
  drep_deposit                     Decimal? @db.Decimal(20, 0)
  drep_activity                    Decimal? @db.Decimal(20, 0)
  pvtpp_security_group             Float?
  min_fee_ref_script_cost_per_byte Float?

  @@index([cost_model_id], map: "idx_param_proposal_cost_model_id")
  @@index([registered_tx_id], map: "idx_param_proposal_registered_tx_id")
}

model pool_hash {
  id       BigInt @id @default(autoincrement())
  hash_raw Bytes  @unique(map: "unique_pool_hash")
  view     String @db.VarChar
}

model pool_metadata_ref {
  id               BigInt @id @default(autoincrement())
  pool_id          BigInt
  url              String @db.VarChar
  hash             Bytes
  registered_tx_id BigInt

  @@index([pool_id], map: "idx_pool_metadata_ref_pool_id")
  @@index([registered_tx_id], map: "idx_pool_metadata_ref_registered_tx_id")
}

model pool_owner {
  id             BigInt @id @default(autoincrement())
  addr_id        BigInt
  pool_update_id BigInt

  @@index([pool_update_id])
}

model pool_relay {
  id           BigInt  @id @default(autoincrement())
  update_id    BigInt
  ipv4         String? @db.VarChar
  ipv6         String? @db.VarChar
  dns_name     String? @db.VarChar
  dns_srv_name String? @db.VarChar
  port         Int?

  @@index([update_id], map: "idx_pool_relay_update_id")
}

model pool_retire {
  id              BigInt @id @default(autoincrement())
  hash_id         BigInt
  cert_index      Int
  announced_tx_id BigInt
  retiring_epoch  Int

  @@index([announced_tx_id], map: "idx_pool_retire_announced_tx_id")
  @@index([hash_id], map: "idx_pool_retire_hash_id")
}

model pool_stat {
  id                   BigInt   @id @default(autoincrement())
  pool_hash_id         BigInt
  epoch_no             Int
  number_of_blocks     Decimal  @db.Decimal(20, 0)
  number_of_delegators Decimal  @db.Decimal(20, 0)
  stake                Decimal  @db.Decimal(20, 0)
  voting_power         Decimal? @db.Decimal(20, 0)
}

model pool_update {
  id               BigInt   @id @default(autoincrement())
  hash_id          BigInt
  cert_index       Int
  vrf_key_hash     Bytes
  pledge           Decimal  @db.Decimal(20, 0)
  active_epoch_no  BigInt
  meta_id          BigInt?
  margin           Float
  fixed_cost       Decimal  @db.Decimal(20, 0)
  registered_tx_id BigInt
  reward_addr_id   BigInt
  deposit          Decimal? @db.Decimal(20, 0)

  @@index([active_epoch_no], map: "idx_pool_update_active_epoch_no")
  @@index([hash_id], map: "idx_pool_update_hash_id")
  @@index([meta_id], map: "idx_pool_update_meta_id")
  @@index([registered_tx_id], map: "idx_pool_update_registered_tx_id")
  @@index([reward_addr_id], map: "idx_pool_update_reward_addr")
}

model pot_transfer {
  id         BigInt  @id @default(autoincrement())
  cert_index Int
  treasury   Decimal @db.Decimal(20, 0)
  reserves   Decimal @db.Decimal(20, 0)
  tx_id      BigInt
}

model redeemer {
  id               BigInt            @id @default(autoincrement())
  tx_id            BigInt
  unit_mem         BigInt
  unit_steps       BigInt
  fee              Decimal?          @db.Decimal(20, 0)
  purpose          scriptpurposetype
  index            Int
  script_hash      Bytes?
  redeemer_data_id BigInt

  @@index([redeemer_data_id])
}

model redeemer_data {
  id    BigInt @id @default(autoincrement())
  hash  Bytes  @unique(map: "unique_redeemer_data")
  tx_id BigInt
  value Json?
  bytes Bytes

  @@index([tx_id])
}

model reference_tx_in {
  id           BigInt @id @default(autoincrement())
  tx_in_id     BigInt
  tx_out_id    BigInt
  tx_out_index Int    @db.SmallInt

  @@index([tx_out_id])
}

model reserve {
  id         BigInt  @id @default(autoincrement())
  addr_id    BigInt
  cert_index Int
  amount     Decimal @db.Decimal(20, 0)
  tx_id      BigInt

  @@index([addr_id], map: "idx_reserve_addr_id")
  @@index([tx_id], map: "idx_reserve_tx_id")
}

model reserved_pool_ticker {
  id        BigInt @id @default(autoincrement())
  name      String @unique(map: "unique_reserved_pool_ticker") @db.VarChar
  pool_hash Bytes

  @@index([pool_hash], map: "idx_reserved_pool_ticker_pool_hash")
}

model reverse_index {
  id       BigInt @id @default(autoincrement())
  block_id BigInt
  min_ids  String @db.VarChar
}

model reward {
  addr_id         BigInt
  type            rewardtype
  amount          Decimal    @db.Decimal(20, 0)
  spendable_epoch BigInt
  pool_id         BigInt
  earned_epoch    BigInt     @default(dbgenerated("\nCASE\n    WHEN (type = 'refund'::rewardtype) THEN spendable_epoch\n    ELSE\n    CASE\n        WHEN (spendable_epoch >= 2) THEN (spendable_epoch - 2)\n        ELSE (0)::bigint\n    END\nEND"))

  @@unique([addr_id, type, earned_epoch, pool_id], map: "unique_reward")
  @@index([addr_id], map: "idx_reward_addr_id")
  @@index([earned_epoch], map: "idx_reward_earned_epoch")
  @@index([pool_id], map: "idx_reward_pool_id")
  @@index([spendable_epoch], map: "idx_reward_spendable_epoch")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model reward_rest {
  addr_id         BigInt
  type            rewardtype
  amount          Decimal    @db.Decimal(20, 0)
  spendable_epoch BigInt
  earned_epoch    BigInt     @default(dbgenerated("\nCASE\n    WHEN (spendable_epoch >= 1) THEN (spendable_epoch - 1)\n    ELSE (0)::bigint\nEND"))

  @@ignore
}

model schema_version {
  id          BigInt @id @default(autoincrement())
  stage_one   BigInt
  stage_two   BigInt
  stage_three BigInt
}

model script {
  id              BigInt     @id @default(autoincrement())
  tx_id           BigInt
  hash            Bytes      @unique(map: "unique_script")
  type            scripttype
  json            Json?
  bytes           Bytes?
  serialised_size Int?

  @@index([tx_id], map: "idx_script_tx_id")
}

model slot_leader {
  id           BigInt  @id @default(autoincrement())
  hash         Bytes   @unique(map: "unique_slot_leader")
  pool_hash_id BigInt?
  description  String  @db.VarChar

  @@index([pool_hash_id], map: "idx_slot_leader_pool_hash_id")
}

model stake_address {
  id          BigInt @id @default(autoincrement())
  hash_raw    Bytes  @unique(map: "unique_stake_address")
  view        String @db.VarChar
  script_hash Bytes?

  stake_deregistration stake_deregistration[]
  stake_registration   stake_registration[]

  @@index([hash_raw], map: "idx_stake_address_hash_raw")
  @@index([view], map: "idx_stake_address_view", type: Hash)
}

model stake_deregistration {
  id          BigInt  @id @default(autoincrement())
  addr_id     BigInt
  cert_index  Int
  epoch_no    Int
  tx_id       BigInt
  redeemer_id BigInt?

  // Define foreign key relationships
  stake_address stake_address @relation(fields: [addr_id], references: [id])

  @@index([addr_id], map: "idx_stake_deregistration_addr_id")
  @@index([redeemer_id], map: "idx_stake_deregistration_redeemer_id")
  @@index([tx_id], map: "idx_stake_deregistration_tx_id")
}

model stake_registration {
  id         BigInt   @id @default(autoincrement())
  addr_id    BigInt
  cert_index Int
  epoch_no   Int
  tx_id      BigInt
  deposit    Decimal? @db.Decimal(20, 0)

  stake_address stake_address @relation(fields: [addr_id], references: [id])

  @@index([addr_id], map: "idx_stake_registration_addr_id")
  @@index([tx_id], map: "idx_stake_registration_tx_id")
}

model treasury {
  id         BigInt  @id @default(autoincrement())
  addr_id    BigInt
  cert_index Int
  amount     Decimal @db.Decimal(20, 0)
  tx_id      BigInt

  @@index([addr_id], map: "idx_treasury_addr_id")
  @@index([tx_id], map: "idx_treasury_tx_id")
}

model treasury_withdrawal {
  id                     BigInt  @id @default(autoincrement())
  gov_action_proposal_id BigInt
  stake_address_id       BigInt
  amount                 Decimal @db.Decimal(20, 0)
}

model tx {
  id                BigInt   @id @default(autoincrement())
  hash              Bytes    @unique(map: "unique_tx")
  block_id          BigInt
  block_index       Int
  out_sum           Decimal  @db.Decimal(20, 0)
  fee               Decimal  @db.Decimal(20, 0)
  deposit           BigInt?
  size              Int
  invalid_before    Decimal? @db.Decimal(20, 0)
  invalid_hereafter Decimal? @db.Decimal(20, 0)
  valid_contract    Boolean
  script_size       Int
  treasury_donation Decimal  @default(0) @db.Decimal(20, 0)

  @@index([block_id], map: "idx_tx_block_id")
}

model tx_cbor {
  id    BigInt @id @default(autoincrement())
  tx_id BigInt
  bytes Bytes

  @@index([tx_id], map: "idx_tx_cbor_tx_id")
}

model tx_in {
  id           BigInt  @id @default(autoincrement())
  tx_in_id     BigInt
  tx_out_id    BigInt
  tx_out_index Int     @db.SmallInt
  redeemer_id  BigInt?

  @@index([redeemer_id], map: "idx_tx_in_redeemer_id")
  @@index([tx_in_id], map: "idx_tx_in_tx_in_id")
  @@index([tx_out_id], map: "idx_tx_in_tx_out_id")
}

model tx_metadata {
  id    BigInt  @id @default(autoincrement())
  key   Decimal @db.Decimal(20, 0)
  json  Json?
  bytes Bytes
  tx_id BigInt

  @@index([tx_id], map: "idx_tx_metadata_tx_id")
}

model tx_out {
  id                  BigInt  @id @default(autoincrement())
  tx_id               BigInt
  index               Int     @db.SmallInt
  address             String  @db.VarChar
  address_has_script  Boolean
  payment_cred        Bytes?
  stake_address_id    BigInt?
  value               Decimal @db.Decimal(20, 0)
  data_hash           Bytes?
  inline_datum_id     BigInt?
  reference_script_id BigInt?

  @@unique([tx_id, index], map: "unique_txout")
  @@index([address], map: "idx_tx_out_address", type: Hash)
  @@index([payment_cred], map: "idx_tx_out_payment_cred")
  @@index([stake_address_id], map: "idx_tx_out_stake_address_id")
  @@index([tx_id], map: "idx_tx_out_tx_id")
  @@index([inline_datum_id])
  @@index([reference_script_id])
}

model voting_anchor {
  id        BigInt     @id @default(autoincrement())
  url       String     @db.VarChar
  data_hash Bytes
  type      anchortype
  block_id  BigInt

  @@unique([data_hash, url, type], map: "unique_voting_anchor")
}

model voting_procedure {
  id                     BigInt    @id @default(autoincrement())
  tx_id                  BigInt
  index                  Int
  gov_action_proposal_id BigInt
  voter_role             voterrole
  drep_voter             BigInt?
  pool_voter             BigInt?
  vote                   vote
  voting_anchor_id       BigInt?
  committee_voter        BigInt?
  invalid                BigInt?
}

model withdrawal {
  id          BigInt  @id @default(autoincrement())
  addr_id     BigInt
  amount      Decimal @db.Decimal(20, 0)
  redeemer_id BigInt?
  tx_id       BigInt

  @@index([addr_id], map: "idx_withdrawal_addr_id")
  @@index([redeemer_id], map: "idx_withdrawal_redeemer_id")
  @@index([tx_id], map: "idx_withdrawal_tx_id")
}

enum anchortype {
  gov_action
  drep
  other
  vote
  committee_dereg
  constitution
}

enum govactiontype {
  ParameterChange
  HardForkInitiation
  TreasuryWithdrawals
  NoConfidence
  NewCommittee
  NewConstitution
  InfoAction
}

enum rewardtype {
  leader
  member
  reserves
  treasury
  refund
  proposal_refund
}

enum scriptpurposetype {
  spend
  mint
  cert
  reward
  vote
  propose
}

enum scripttype {
  multisig
  timelock
  plutusV1
  plutusV2
  plutusV3
}

enum syncstatetype {
  lagging
  following
}

enum vote {
  Yes
  No
  Abstain
}

enum voterrole {
  ConstitutionalCommittee
  DRep
  SPO
}
