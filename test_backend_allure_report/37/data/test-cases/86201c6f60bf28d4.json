{"uid":"86201c6f60bf28d4","name":"Test Cron Transfer ADA Logs","fullName":"test_cases.test_agent_functions.TestAgentFunctionExecution#test_cron_transfer_ada_logs","historyId":"8f129459ef0776a0fa46da5fc475ea3a","time":{"start":1727185310564,"stop":1727185310806,"duration":242},"status":"failed","statusMessage":"AssertionError: No successful 'transferADA' log found | Failed Logs: None","statusTrace":"logs = [], function_name = 'transferADA', trigger_type = 'CRON'\nmessage = \"No successful 'transferADA' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n>           assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\nE           AssertionError: No successful 'transferADA' log found\nE           assert False\nE            +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7f0541eabe60>)\n\ntest_cases/test_agent_functions.py:6: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cases.test_agent_functions.TestAgentFunctionExecution object at 0x7f05426b8e30>\nrun_admin_agent_fixture = <Response [200]>\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7f05427c90d0>\n\n    @allure.sub_suite(\"CRON\")\n    @allure.title(\"Test Cron Transfer ADA Logs\")\n    @allure.feature(\"Transfer Ada Cron Function\")\n    def test_cron_transfer_ada_logs(\n        self, run_admin_agent_fixture, autonomous_agent_api\n    ):\n        agent_id = run_admin_agent_fixture.json().get(\"id\")\n        logs = (\n            autonomous_agent_api.get_trigger_history(\n                param=f\"?agent_id={agent_id}&functionName={'transferADA'}\"\n            )\n            .json()\n            .get(\"items\")\n        )\n>       assert_successful_log(\n            logs,\n            function_name=\"transferADA\",\n            trigger_type=\"CRON\",\n            message=\"No successful 'transferADA' log found\",\n        )\n\ntest_cases/test_agent_functions.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = [], function_name = 'transferADA', trigger_type = 'CRON'\nmessage = \"No successful 'transferADA' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n            assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\n        except AssertionError:\n            failed_logs = [log for log in logs if log[\"functionName\"] == function_name]\n    \n            if failed_logs:\n                allure.attach(\n                    str(failed_logs),\n                    name=\"Filtered Logs with Matching Function Name\",\n                    attachment_type=allure.attachment_type.JSON,\n                )\n            else:\n                allure.attach(\n                    \"No log found with the given parameters.\",\n                    name=\"No Matching Logs\",\n                    attachment_type=allure.attachment_type.TEXT,\n                )\n>           raise AssertionError(\n                f\"{message} | Failed Logs: {failed_logs if failed_logs else 'None'}\"\n            )\nE           AssertionError: No successful 'transferADA' log found | Failed Logs: None\n\ntest_cases/test_agent_functions.py:28: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"autonomous_agent_api","time":{"start":1727184824564,"stop":1727184824564,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_login_response","time":{"start":1727184825039,"stop":1727184825173,"duration":134},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_template_fixture","time":{"start":1727184825173,"stop":1727184825314,"duration":141},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_login_cookie","time":{"start":1727184825173,"stop":1727184825173,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"edit_template_fixture","time":{"start":1727184825314,"stop":1727184825463,"duration":149},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_admin_agent_fixture","time":{"start":1727184825463,"stop":1727184825610,"duration":147},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"edit_admin_agent_fixture","time":{"start":1727184826000,"stop":1727184826161,"duration":161},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"load_funds_to_agent_address","time":{"start":1727184826163,"stop":1727184947392,"duration":121229},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"run_admin_agent_fixture","time":{"start":1727184947393,"stop":1727185310121,"duration":362728},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: No successful 'transferADA' log found | Failed Logs: None","statusTrace":"logs = [], function_name = 'transferADA', trigger_type = 'CRON'\nmessage = \"No successful 'transferADA' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n>           assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\nE           AssertionError: No successful 'transferADA' log found\nE           assert False\nE            +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7f0541eabe60>)\n\ntest_cases/test_agent_functions.py:6: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cases.test_agent_functions.TestAgentFunctionExecution object at 0x7f05426b8e30>\nrun_admin_agent_fixture = <Response [200]>\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7f05427c90d0>\n\n    @allure.sub_suite(\"CRON\")\n    @allure.title(\"Test Cron Transfer ADA Logs\")\n    @allure.feature(\"Transfer Ada Cron Function\")\n    def test_cron_transfer_ada_logs(\n        self, run_admin_agent_fixture, autonomous_agent_api\n    ):\n        agent_id = run_admin_agent_fixture.json().get(\"id\")\n        logs = (\n            autonomous_agent_api.get_trigger_history(\n                param=f\"?agent_id={agent_id}&functionName={'transferADA'}\"\n            )\n            .json()\n            .get(\"items\")\n        )\n>       assert_successful_log(\n            logs,\n            function_name=\"transferADA\",\n            trigger_type=\"CRON\",\n            message=\"No successful 'transferADA' log found\",\n        )\n\ntest_cases/test_agent_functions.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = [], function_name = 'transferADA', trigger_type = 'CRON'\nmessage = \"No successful 'transferADA' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n            assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\n        except AssertionError:\n            failed_logs = [log for log in logs if log[\"functionName\"] == function_name]\n    \n            if failed_logs:\n                allure.attach(\n                    str(failed_logs),\n                    name=\"Filtered Logs with Matching Function Name\",\n                    attachment_type=allure.attachment_type.JSON,\n                )\n            else:\n                allure.attach(\n                    \"No log found with the given parameters.\",\n                    name=\"No Matching Logs\",\n                    attachment_type=allure.attachment_type.TEXT,\n                )\n>           raise AssertionError(\n                f\"{message} | Failed Logs: {failed_logs if failed_logs else 'None'}\"\n            )\nE           AssertionError: No successful 'transferADA' log found | Failed Logs: None\n\ntest_cases/test_agent_functions.py:28: AssertionError","steps":[],"attachments":[{"uid":"18484ee339c2d44f","name":"No Matching Logs","source":"18484ee339c2d44f.txt","type":"text/plain","size":39}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"autonomous_agent_api::0","time":{"start":1727185312141,"stop":1727185312142,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"subSuite","value":"CRON"},{"name":"feature","value":"Transfer Ada Cron Function"},{"name":"parentSuite","value":"Agent Function Execution"},{"name":"suite","value":"test_agent_functions"},{"name":"host","value":"fv-az1106-336"},{"name":"thread","value":"1949-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_agent_functions"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":19,"broken":1,"skipped":0,"passed":18,"unknown":0,"total":38},"items":[{"uid":"1428c930cd68b318","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/36//#testresult/1428c930cd68b318","status":"failed","statusDetails":"AssertionError: No successful 'transferADA' log found | Failed Logs: None","time":{"start":1727177830476,"stop":1727177830710,"duration":234}},{"uid":"85bff142e619a5b","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/35//#testresult/85bff142e619a5b","status":"failed","statusDetails":"AssertionError: No successful 'transferADA' log found | Failed Logs: None","time":{"start":1727169153192,"stop":1727169153421,"duration":229}},{"uid":"883fda673b9e0765","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/34//#testresult/883fda673b9e0765","status":"failed","statusDetails":"AssertionError: No successful 'transferADA' log found | Failed Logs: None","time":{"start":1727152501866,"stop":1727152502078,"duration":212}},{"uid":"20cf743b5dd548d6","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/34//#testresult/20cf743b5dd548d6","status":"failed","statusDetails":"AssertionError: No successful 'transferADA' log found | Failed Logs: None","time":{"start":1727148732500,"stop":1727148732703,"duration":203}},{"uid":"41996c917422888f","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/34//#testresult/41996c917422888f","status":"broken","statusDetails":"requests.exceptions.SSLError: HTTPSConnectionPool(host='api.agents.cardanoapi.io', port=443): Max retries exceeded with url: /api/trigger-history?agent_id=cbccb0ca-8534-47ca-95e0-0020248e9820&functionName=transferADA (Caused by SSLError(SSLEOFError(8, '[SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1000)')))","time":{"start":1727088033249,"stop":1727088033477,"duration":228}},{"uid":"f999a5bee35e9dff","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/33//#testresult/f999a5bee35e9dff","status":"failed","statusDetails":"AssertionError: Expected POST /templates to succeed but got statusCode: 403 : body: \"Forbidden Request\"","time":{"start":1726811571620,"stop":1726811571620,"duration":0}},{"uid":"cf3dc104a4351f3e","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/32//#testresult/cf3dc104a4351f3e","status":"failed","statusDetails":"AssertionError: Expected POST /templates to succeed but got statusCode: 403 : body: \"Forbidden Request\"","time":{"start":1726738987758,"stop":1726738987758,"duration":0}},{"uid":"8e301d229f39cec7","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/31//#testresult/8e301d229f39cec7","status":"failed","statusDetails":"AssertionError: Expected POST /templates to succeed but got statusCode: 403 : body: \"Forbidden Request\"","time":{"start":1726730682611,"stop":1726730682611,"duration":0}},{"uid":"63f0b4a950ee6433","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/30//#testresult/63f0b4a950ee6433","status":"passed","time":{"start":1726730663452,"stop":1726730663712,"duration":260}},{"uid":"3ef4a4a4c492f0eb","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/29//#testresult/3ef4a4a4c492f0eb","status":"passed","time":{"start":1726655637829,"stop":1726655638050,"duration":221}},{"uid":"df01e05ab55daf0b","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/28//#testresult/df01e05ab55daf0b","status":"passed","time":{"start":1726572393691,"stop":1726572394006,"duration":315}},{"uid":"33fe24ae837bfa1f","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/27//#testresult/33fe24ae837bfa1f","status":"passed","time":{"start":1726571193184,"stop":1726571193459,"duration":275}},{"uid":"596dc841305e57b4","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/26//#testresult/596dc841305e57b4","status":"passed","time":{"start":1726555652881,"stop":1726555653177,"duration":296}},{"uid":"1525d9ba890b0cb6","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/25//#testresult/1525d9ba890b0cb6","status":"passed","time":{"start":1726554683559,"stop":1726554683850,"duration":291}},{"uid":"3a1b6e4c05af7d53","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/24//#testresult/3a1b6e4c05af7d53","status":"passed","time":{"start":1726552149497,"stop":1726552149763,"duration":266}},{"uid":"37c3eb3b1df607fe","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/23//#testresult/37c3eb3b1df607fe","status":"passed","time":{"start":1726475579618,"stop":1726475579937,"duration":319}},{"uid":"5ba99f2fb408df1c","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/22//#testresult/5ba99f2fb408df1c","status":"passed","time":{"start":1726461465539,"stop":1726461465821,"duration":282}},{"uid":"4d4a696a6ab6d230","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/19//#testresult/4d4a696a6ab6d230","status":"failed","statusDetails":"AssertionError: Expected PUT /agents/0016a154-7e9f-4729-a27d-fce73da9fdbc to succeed but got statusCode: 500 : body: Traceback (most recent call last):\n  File \"/usr/local/lib/python3.12/site-packages/starlette/middleware/errors.py\", line 162, in __call__\n    await self.app(scope, receive, _send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/middleware/cors.py\", line 83, in __call__\n    await self.app(scope, receive, send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/middleware/exceptions.py\", line 79, in __call__\n    raise exc\n  File \"/usr/local/lib/python3.12/site-packages/starlette/middleware/exceptions.py\", line 68, in __call__\n    await self.app(scope, receive, sender)\n  File \"/usr/local/lib/python3.12/site-packages/fastapi/middleware/asyncexitstack.py\", line 20, in __call__\n    raise e\n  File \"/usr/local/lib/python3.12/site-packages/fastapi/middleware/asyncexitstack.py\", line 17, in __call__\n    await self.app(scope, receive, send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/routing.py\", line 718, in __call__\n    await route.handle(scope, receive, send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/routing.py\", line 276, in handle\n    await self.app(scope, receive, send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/routing.py\", line 66, in app\n    response = await func(request)\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/fastapi/routing.py\", line 241, in app\n    raw_response = await run_endpoint_function(\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/fastapi/routing.py\", line 167, in run_endpoint_function\n    return await dependant.call(**values)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/api/backend/backend/app/controllers/agent_router.py\", line 48, in update_agent\n    updated_agent = await self.agent_service.update_agent(agent_id, agent_data, userAddress=user.address)\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/api/backend/backend/app/services/agent_service.py\", line 100, in update_agent\n    if existing_agent.instance < agent_data.instance:\n       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: '<' not supported between instances of 'int' and 'NoneType'","time":{"start":1726056110345,"stop":1726056110345,"duration":0}},{"uid":"3a5f24dc3e3020c8","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/18//#testresult/3a5f24dc3e3020c8","status":"failed","statusDetails":"AssertionError: Expected PUT /agents/52ee8252-01f5-427b-9777-842bdbc37d18 to succeed but got statusCode: 500 : body: Traceback (most recent call last):\n  File \"/usr/local/lib/python3.12/site-packages/starlette/middleware/errors.py\", line 162, in __call__\n    await self.app(scope, receive, _send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/middleware/cors.py\", line 83, in __call__\n    await self.app(scope, receive, send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/middleware/exceptions.py\", line 79, in __call__\n    raise exc\n  File \"/usr/local/lib/python3.12/site-packages/starlette/middleware/exceptions.py\", line 68, in __call__\n    await self.app(scope, receive, sender)\n  File \"/usr/local/lib/python3.12/site-packages/fastapi/middleware/asyncexitstack.py\", line 20, in __call__\n    raise e\n  File \"/usr/local/lib/python3.12/site-packages/fastapi/middleware/asyncexitstack.py\", line 17, in __call__\n    await self.app(scope, receive, send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/routing.py\", line 718, in __call__\n    await route.handle(scope, receive, send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/routing.py\", line 276, in handle\n    await self.app(scope, receive, send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/routing.py\", line 66, in app\n    response = await func(request)\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/fastapi/routing.py\", line 241, in app\n    raw_response = await run_endpoint_function(\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/fastapi/routing.py\", line 167, in run_endpoint_function\n    return await dependant.call(**values)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/api/backend/backend/app/controllers/agent_router.py\", line 48, in update_agent\n    updated_agent = await self.agent_service.update_agent(agent_id, agent_data, userAddress=user.address)\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/api/backend/backend/app/services/agent_service.py\", line 100, in update_agent\n    if existing_agent.instance < agent_data.instance:\n       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: '<' not supported between instances of 'int' and 'NoneType'","time":{"start":1726051674592,"stop":1726051674592,"duration":0}},{"uid":"e3fe69c3cad9c939","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/17//#testresult/e3fe69c3cad9c939","status":"failed","statusDetails":"AssertionError: Expected PUT /agents/bc73d298-36ba-42e2-b8ba-889292fd3a0f to succeed but got statusCode: 500 : body: Traceback (most recent call last):\n  File \"/usr/local/lib/python3.12/site-packages/starlette/middleware/errors.py\", line 162, in __call__\n    await self.app(scope, receive, _send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/middleware/cors.py\", line 83, in __call__\n    await self.app(scope, receive, send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/middleware/exceptions.py\", line 79, in __call__\n    raise exc\n  File \"/usr/local/lib/python3.12/site-packages/starlette/middleware/exceptions.py\", line 68, in __call__\n    await self.app(scope, receive, sender)\n  File \"/usr/local/lib/python3.12/site-packages/fastapi/middleware/asyncexitstack.py\", line 20, in __call__\n    raise e\n  File \"/usr/local/lib/python3.12/site-packages/fastapi/middleware/asyncexitstack.py\", line 17, in __call__\n    await self.app(scope, receive, send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/routing.py\", line 718, in __call__\n    await route.handle(scope, receive, send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/routing.py\", line 276, in handle\n    await self.app(scope, receive, send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/routing.py\", line 66, in app\n    response = await func(request)\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/fastapi/routing.py\", line 241, in app\n    raw_response = await run_endpoint_function(\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/fastapi/routing.py\", line 167, in run_endpoint_function\n    return await dependant.call(**values)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/api/backend/backend/app/controllers/agent_router.py\", line 48, in update_agent\n    updated_agent = await self.agent_service.update_agent(agent_id, agent_data, userAddress=user.address)\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/api/backend/backend/app/services/agent_service.py\", line 96, in update_agent\n    existing_agent = await self.agent_repository.modify_agent(agent_id, agent_data)\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/api/backend/backend/app/repositories/agent_repository.py\", line 80, in modify_agent\n    updated_agent = await self.db.prisma.agent.update(where={\"id\": agent_id}, data=updated_data)\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/prisma/actions.py\", line 666, in update\n    resp = await self._client._execute(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/prisma/_base_client.py\", line 533, in _execute\n    return await self._engine.query(builder.build(), tx_id=self._tx_id)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/prisma/engine/_query.py\", line 404, in query\n    return await self.request(\n           ^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/prisma/engine/_http.py\", line 233, in request\n    return self._process_response_data(data=data, response=response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/prisma/engine/_http.py\", line 87, in _process_response_data\n    return utils.handle_response_errors(response, errors_data)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/prisma/engine/utils.py\", line 163, in handle_response_errors\n    raise prisma_errors.MissingRequiredValueError(error)\nprisma.errors.MissingRequiredValueError: Unable to match input value to any allowed input type for the field. Parse errors: [Unable to match input value to any allowed input type for the field. Parse errors: [`data.instance`: A value is required but not set, `data.instance`: A value is required but not set], Unable to match input value to any allowed input type for the field. Parse errors: [`data.instance`: A value is required but not set, `data.instance`: A value is required but not set]]","time":{"start":1726047884389,"stop":1726047884389,"duration":0}}]},"tags":[]},"source":"86201c6f60bf28d4.json","parameterValues":[]}