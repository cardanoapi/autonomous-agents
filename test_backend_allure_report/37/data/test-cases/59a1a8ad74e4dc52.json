{"uid":"59a1a8ad74e4dc52","name":"Test Manual Info Action Proposal Logs","fullName":"test_cases.test_agent_functions.TestAgentFunctionExecution#test_manual_info_action_proposal_logs","historyId":"011c6a73c3f72f6a7ca823b0704e81e3","time":{"start":1727185310839,"stop":1727185311080,"duration":241},"status":"failed","statusMessage":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","statusTrace":"logs = [], function_name = 'createInfoGovAction', trigger_type = 'MANUAL'\nmessage = \"No successful 'create infoAction proposal' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n>           assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\nE           AssertionError: No successful 'create infoAction proposal' log found\nE           assert False\nE            +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7f0541d70f20>)\n\ntest_cases/test_agent_functions.py:6: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cases.test_agent_functions.TestAgentFunctionExecution object at 0x7f05426b9ee0>\nrun_admin_agent_fixture = <Response [200]>\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7f05427c90d0>\n\n    @allure.sub_suite(\"MANUAL\")\n    @allure.title(\"Test Manual Info Action Proposal Logs\")\n    @allure.feature(\"Create Gov Info Action Function\")\n    def test_manual_info_action_proposal_logs(\n        self, run_admin_agent_fixture, autonomous_agent_api\n    ):\n        agent_id = run_admin_agent_fixture.json().get(\"id\")\n        logs = (\n            autonomous_agent_api.get_trigger_history(\n                param=f\"?agent_id={agent_id}&functionName={'createInfoGovAction'}\"\n            )\n            .json()\n            .get(\"items\")\n        )\n>       assert_successful_log(\n            logs,\n            function_name=\"createInfoGovAction\",\n            trigger_type=\"MANUAL\",\n            message=\"No successful 'create infoAction proposal' log found\",\n        )\n\ntest_cases/test_agent_functions.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = [], function_name = 'createInfoGovAction', trigger_type = 'MANUAL'\nmessage = \"No successful 'create infoAction proposal' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n            assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\n        except AssertionError:\n            failed_logs = [log for log in logs if log[\"functionName\"] == function_name]\n    \n            if failed_logs:\n                allure.attach(\n                    str(failed_logs),\n                    name=\"Filtered Logs with Matching Function Name\",\n                    attachment_type=allure.attachment_type.JSON,\n                )\n            else:\n                allure.attach(\n                    \"No log found with the given parameters.\",\n                    name=\"No Matching Logs\",\n                    attachment_type=allure.attachment_type.TEXT,\n                )\n>           raise AssertionError(\n                f\"{message} | Failed Logs: {failed_logs if failed_logs else 'None'}\"\n            )\nE           AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None\n\ntest_cases/test_agent_functions.py:28: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"autonomous_agent_api","time":{"start":1727184824564,"stop":1727184824564,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_login_response","time":{"start":1727184825039,"stop":1727184825173,"duration":134},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_template_fixture","time":{"start":1727184825173,"stop":1727184825314,"duration":141},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_login_cookie","time":{"start":1727184825173,"stop":1727184825173,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"edit_template_fixture","time":{"start":1727184825314,"stop":1727184825463,"duration":149},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_admin_agent_fixture","time":{"start":1727184825463,"stop":1727184825610,"duration":147},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"edit_admin_agent_fixture","time":{"start":1727184826000,"stop":1727184826161,"duration":161},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"load_funds_to_agent_address","time":{"start":1727184826163,"stop":1727184947392,"duration":121229},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"run_admin_agent_fixture","time":{"start":1727184947393,"stop":1727185310121,"duration":362728},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","statusTrace":"logs = [], function_name = 'createInfoGovAction', trigger_type = 'MANUAL'\nmessage = \"No successful 'create infoAction proposal' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n>           assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\nE           AssertionError: No successful 'create infoAction proposal' log found\nE           assert False\nE            +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7f0541d70f20>)\n\ntest_cases/test_agent_functions.py:6: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cases.test_agent_functions.TestAgentFunctionExecution object at 0x7f05426b9ee0>\nrun_admin_agent_fixture = <Response [200]>\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7f05427c90d0>\n\n    @allure.sub_suite(\"MANUAL\")\n    @allure.title(\"Test Manual Info Action Proposal Logs\")\n    @allure.feature(\"Create Gov Info Action Function\")\n    def test_manual_info_action_proposal_logs(\n        self, run_admin_agent_fixture, autonomous_agent_api\n    ):\n        agent_id = run_admin_agent_fixture.json().get(\"id\")\n        logs = (\n            autonomous_agent_api.get_trigger_history(\n                param=f\"?agent_id={agent_id}&functionName={'createInfoGovAction'}\"\n            )\n            .json()\n            .get(\"items\")\n        )\n>       assert_successful_log(\n            logs,\n            function_name=\"createInfoGovAction\",\n            trigger_type=\"MANUAL\",\n            message=\"No successful 'create infoAction proposal' log found\",\n        )\n\ntest_cases/test_agent_functions.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = [], function_name = 'createInfoGovAction', trigger_type = 'MANUAL'\nmessage = \"No successful 'create infoAction proposal' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n            assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\n        except AssertionError:\n            failed_logs = [log for log in logs if log[\"functionName\"] == function_name]\n    \n            if failed_logs:\n                allure.attach(\n                    str(failed_logs),\n                    name=\"Filtered Logs with Matching Function Name\",\n                    attachment_type=allure.attachment_type.JSON,\n                )\n            else:\n                allure.attach(\n                    \"No log found with the given parameters.\",\n                    name=\"No Matching Logs\",\n                    attachment_type=allure.attachment_type.TEXT,\n                )\n>           raise AssertionError(\n                f\"{message} | Failed Logs: {failed_logs if failed_logs else 'None'}\"\n            )\nE           AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None\n\ntest_cases/test_agent_functions.py:28: AssertionError","steps":[],"attachments":[{"uid":"9d86e17ba80b71fc","name":"No Matching Logs","source":"9d86e17ba80b71fc.txt","type":"text/plain","size":39}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"autonomous_agent_api::0","time":{"start":1727185312141,"stop":1727185312142,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"subSuite","value":"MANUAL"},{"name":"parentSuite","value":"Agent Function Execution"},{"name":"feature","value":"Create Gov Info Action Function"},{"name":"suite","value":"test_agent_functions"},{"name":"host","value":"fv-az1106-336"},{"name":"thread","value":"1949-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_agent_functions"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":20,"broken":2,"skipped":0,"passed":16,"unknown":0,"total":38},"items":[{"uid":"b144d15ca1d84d2c","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/36//#testresult/b144d15ca1d84d2c","status":"failed","statusDetails":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","time":{"start":1727177830744,"stop":1727177830978,"duration":234}},{"uid":"94bae2223abdd1c4","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/35//#testresult/94bae2223abdd1c4","status":"failed","statusDetails":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","time":{"start":1727169153454,"stop":1727169153676,"duration":222}},{"uid":"5887993078708ee6","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/34//#testresult/5887993078708ee6","status":"failed","statusDetails":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","time":{"start":1727152502111,"stop":1727152502317,"duration":206}},{"uid":"872a864229f96119","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/34//#testresult/872a864229f96119","status":"failed","statusDetails":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","time":{"start":1727148732737,"stop":1727148732937,"duration":200}},{"uid":"83972e8fe46deb8e","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/34//#testresult/83972e8fe46deb8e","status":"broken","statusDetails":"requests.exceptions.SSLError: HTTPSConnectionPool(host='api.agents.cardanoapi.io', port=443): Max retries exceeded with url: /api/trigger-history?agent_id=cbccb0ca-8534-47ca-95e0-0020248e9820&functionName=createInfoGovAction (Caused by SSLError(SSLEOFError(8, '[SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1000)')))","time":{"start":1727088033604,"stop":1727088033831,"duration":227}},{"uid":"4e7dc8b70164e8db","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/33//#testresult/4e7dc8b70164e8db","status":"failed","statusDetails":"AssertionError: Expected POST /templates to succeed but got statusCode: 403 : body: \"Forbidden Request\"","time":{"start":1726811571632,"stop":1726811571632,"duration":0}},{"uid":"9a493af09bde6a62","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/32//#testresult/9a493af09bde6a62","status":"failed","statusDetails":"AssertionError: Expected POST /templates to succeed but got statusCode: 403 : body: \"Forbidden Request\"","time":{"start":1726738987770,"stop":1726738987770,"duration":0}},{"uid":"16349baffa7a7d86","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/31//#testresult/16349baffa7a7d86","status":"failed","statusDetails":"AssertionError: Expected POST /templates to succeed but got statusCode: 403 : body: \"Forbidden Request\"","time":{"start":1726730682623,"stop":1726730682623,"duration":0}},{"uid":"85b62939b4caf643","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/30//#testresult/85b62939b4caf643","status":"passed","time":{"start":1726730663713,"stop":1726730663930,"duration":217}},{"uid":"e8808b1c877221e6","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/29//#testresult/e8808b1c877221e6","status":"passed","time":{"start":1726655638051,"stop":1726655638282,"duration":231}},{"uid":"993c1d2f1ff6328d","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/28//#testresult/993c1d2f1ff6328d","status":"passed","time":{"start":1726572394008,"stop":1726572394312,"duration":304}},{"uid":"7a1bf7f1eae54259","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/27//#testresult/7a1bf7f1eae54259","status":"passed","time":{"start":1726571193461,"stop":1726571193680,"duration":219}},{"uid":"b5fbcba8bca04e1b","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/26//#testresult/b5fbcba8bca04e1b","status":"failed","statusDetails":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: [{'agentId': '4c382513-8e75-40c7-acd3-80b9196abaf0', 'functionName': 'createInfoGovAction', 'status': True, 'success': False, 'timestamp': '2024-09-17T06:42:42.525000+00:00', 'message': 'Timeout on RPC call', 'triggerType': 'MANUAL', 'txHash': None, 'instanceIndex': 0}]","time":{"start":1726555653178,"stop":1726555653433,"duration":255}},{"uid":"720ad678db9d4374","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/25//#testresult/720ad678db9d4374","status":"failed","statusDetails":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: [{'agentId': 'ce72cfec-b76f-446f-a81e-ae75fe654174', 'functionName': 'createInfoGovAction', 'status': True, 'success': False, 'timestamp': '2024-09-17T06:26:33.082000+00:00', 'message': 'Timeout on RPC call', 'triggerType': 'MANUAL', 'txHash': None, 'instanceIndex': 0}]","time":{"start":1726554683851,"stop":1726554684139,"duration":288}},{"uid":"2e457abe7a8585eb","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/24//#testresult/2e457abe7a8585eb","status":"passed","time":{"start":1726552149764,"stop":1726552150042,"duration":278}},{"uid":"5b7d857cc62ae090","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/23//#testresult/5b7d857cc62ae090","status":"passed","time":{"start":1726475579938,"stop":1726475580236,"duration":298}},{"uid":"c72c7186c55ac1d9","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/22//#testresult/c72c7186c55ac1d9","status":"passed","time":{"start":1726461465822,"stop":1726461466087,"duration":265}},{"uid":"ed575bbe921f0297","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/19//#testresult/ed575bbe921f0297","status":"failed","statusDetails":"AssertionError: Expected PUT /agents/0016a154-7e9f-4729-a27d-fce73da9fdbc to succeed but got statusCode: 500 : body: Traceback (most recent call last):\n  File \"/usr/local/lib/python3.12/site-packages/starlette/middleware/errors.py\", line 162, in __call__\n    await self.app(scope, receive, _send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/middleware/cors.py\", line 83, in __call__\n    await self.app(scope, receive, send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/middleware/exceptions.py\", line 79, in __call__\n    raise exc\n  File \"/usr/local/lib/python3.12/site-packages/starlette/middleware/exceptions.py\", line 68, in __call__\n    await self.app(scope, receive, sender)\n  File \"/usr/local/lib/python3.12/site-packages/fastapi/middleware/asyncexitstack.py\", line 20, in __call__\n    raise e\n  File \"/usr/local/lib/python3.12/site-packages/fastapi/middleware/asyncexitstack.py\", line 17, in __call__\n    await self.app(scope, receive, send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/routing.py\", line 718, in __call__\n    await route.handle(scope, receive, send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/routing.py\", line 276, in handle\n    await self.app(scope, receive, send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/routing.py\", line 66, in app\n    response = await func(request)\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/fastapi/routing.py\", line 241, in app\n    raw_response = await run_endpoint_function(\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/fastapi/routing.py\", line 167, in run_endpoint_function\n    return await dependant.call(**values)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/api/backend/backend/app/controllers/agent_router.py\", line 48, in update_agent\n    updated_agent = await self.agent_service.update_agent(agent_id, agent_data, userAddress=user.address)\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/api/backend/backend/app/services/agent_service.py\", line 100, in update_agent\n    if existing_agent.instance < agent_data.instance:\n       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: '<' not supported between instances of 'int' and 'NoneType'","time":{"start":1726056110357,"stop":1726056110357,"duration":0}},{"uid":"9acdda8b3be9148d","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/18//#testresult/9acdda8b3be9148d","status":"failed","statusDetails":"AssertionError: Expected PUT /agents/52ee8252-01f5-427b-9777-842bdbc37d18 to succeed but got statusCode: 500 : body: Traceback (most recent call last):\n  File \"/usr/local/lib/python3.12/site-packages/starlette/middleware/errors.py\", line 162, in __call__\n    await self.app(scope, receive, _send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/middleware/cors.py\", line 83, in __call__\n    await self.app(scope, receive, send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/middleware/exceptions.py\", line 79, in __call__\n    raise exc\n  File \"/usr/local/lib/python3.12/site-packages/starlette/middleware/exceptions.py\", line 68, in __call__\n    await self.app(scope, receive, sender)\n  File \"/usr/local/lib/python3.12/site-packages/fastapi/middleware/asyncexitstack.py\", line 20, in __call__\n    raise e\n  File \"/usr/local/lib/python3.12/site-packages/fastapi/middleware/asyncexitstack.py\", line 17, in __call__\n    await self.app(scope, receive, send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/routing.py\", line 718, in __call__\n    await route.handle(scope, receive, send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/routing.py\", line 276, in handle\n    await self.app(scope, receive, send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/routing.py\", line 66, in app\n    response = await func(request)\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/fastapi/routing.py\", line 241, in app\n    raw_response = await run_endpoint_function(\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/fastapi/routing.py\", line 167, in run_endpoint_function\n    return await dependant.call(**values)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/api/backend/backend/app/controllers/agent_router.py\", line 48, in update_agent\n    updated_agent = await self.agent_service.update_agent(agent_id, agent_data, userAddress=user.address)\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/api/backend/backend/app/services/agent_service.py\", line 100, in update_agent\n    if existing_agent.instance < agent_data.instance:\n       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: '<' not supported between instances of 'int' and 'NoneType'","time":{"start":1726051674604,"stop":1726051674604,"duration":0}},{"uid":"c945d4157920fe76","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/17//#testresult/c945d4157920fe76","status":"failed","statusDetails":"AssertionError: Expected PUT /agents/bc73d298-36ba-42e2-b8ba-889292fd3a0f to succeed but got statusCode: 500 : body: Traceback (most recent call last):\n  File \"/usr/local/lib/python3.12/site-packages/starlette/middleware/errors.py\", line 162, in __call__\n    await self.app(scope, receive, _send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/middleware/cors.py\", line 83, in __call__\n    await self.app(scope, receive, send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/middleware/exceptions.py\", line 79, in __call__\n    raise exc\n  File \"/usr/local/lib/python3.12/site-packages/starlette/middleware/exceptions.py\", line 68, in __call__\n    await self.app(scope, receive, sender)\n  File \"/usr/local/lib/python3.12/site-packages/fastapi/middleware/asyncexitstack.py\", line 20, in __call__\n    raise e\n  File \"/usr/local/lib/python3.12/site-packages/fastapi/middleware/asyncexitstack.py\", line 17, in __call__\n    await self.app(scope, receive, send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/routing.py\", line 718, in __call__\n    await route.handle(scope, receive, send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/routing.py\", line 276, in handle\n    await self.app(scope, receive, send)\n  File \"/usr/local/lib/python3.12/site-packages/starlette/routing.py\", line 66, in app\n    response = await func(request)\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/fastapi/routing.py\", line 241, in app\n    raw_response = await run_endpoint_function(\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/fastapi/routing.py\", line 167, in run_endpoint_function\n    return await dependant.call(**values)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/api/backend/backend/app/controllers/agent_router.py\", line 48, in update_agent\n    updated_agent = await self.agent_service.update_agent(agent_id, agent_data, userAddress=user.address)\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/api/backend/backend/app/services/agent_service.py\", line 96, in update_agent\n    existing_agent = await self.agent_repository.modify_agent(agent_id, agent_data)\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/api/backend/backend/app/repositories/agent_repository.py\", line 80, in modify_agent\n    updated_agent = await self.db.prisma.agent.update(where={\"id\": agent_id}, data=updated_data)\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/prisma/actions.py\", line 666, in update\n    resp = await self._client._execute(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/prisma/_base_client.py\", line 533, in _execute\n    return await self._engine.query(builder.build(), tx_id=self._tx_id)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/prisma/engine/_query.py\", line 404, in query\n    return await self.request(\n           ^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/prisma/engine/_http.py\", line 233, in request\n    return self._process_response_data(data=data, response=response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/prisma/engine/_http.py\", line 87, in _process_response_data\n    return utils.handle_response_errors(response, errors_data)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/prisma/engine/utils.py\", line 163, in handle_response_errors\n    raise prisma_errors.MissingRequiredValueError(error)\nprisma.errors.MissingRequiredValueError: Unable to match input value to any allowed input type for the field. Parse errors: [Unable to match input value to any allowed input type for the field. Parse errors: [`data.instance`: A value is required but not set, `data.instance`: A value is required but not set], Unable to match input value to any allowed input type for the field. Parse errors: [`data.instance`: A value is required but not set, `data.instance`: A value is required but not set]]","time":{"start":1726047884402,"stop":1726047884402,"duration":0}}]},"tags":[]},"source":"59a1a8ad74e4dc52.json","parameterValues":[]}