{"uid":"fc95993bacc796fb","name":"Test Manual Info Action Proposal Logs","fullName":"test_cases.test_agent_functions.TestAgentFunctionExecution#test_manual_info_action_proposal_logs","historyId":"011c6a73c3f72f6a7ca823b0704e81e3","time":{"start":1727944578969,"stop":1727944579192,"duration":223},"status":"failed","statusMessage":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","statusTrace":"logs = [{'agentId': 'd315555a-30b5-4b6c-af62-16adca7c3369', 'functionName': 'transferADA', 'instanceIndex': 0, 'message': '',...entId': 'd315555a-30b5-4b6c-af62-16adca7c3369', 'functionName': 'transferADA', 'instanceIndex': 0, 'message': '', ...}]\nfunction_name = 'createInfoGovAction', trigger_type = 'MANUAL'\nmessage = \"No successful 'create infoAction proposal' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n>           assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\nE           AssertionError: No successful 'create infoAction proposal' log found\nE           assert False\nE            +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7f7f4a9ac740>)\n\ntest_cases/test_agent_functions.py:6: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cases.test_agent_functions.TestAgentFunctionExecution object at 0x7f7f4b134c20>\nrun_admin_agent_fixture = <Response [200]>\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7f7f4b24b830>\n\n    @allure.sub_suite(\"MANUAL\")\n    @allure.title(\"Test Manual Info Action Proposal Logs\")\n    @allure.feature(\"Create Gov Info Action Function\")\n    def test_manual_info_action_proposal_logs(\n        self, run_admin_agent_fixture, autonomous_agent_api\n    ):\n        agent_id = run_admin_agent_fixture.json().get(\"id\")\n        logs = (\n            autonomous_agent_api.get_trigger_history(\n                param=f\"?agent_id={agent_id}&functionName={'createInfoGovAction'}\"\n            )\n            .json()\n            .get(\"items\")\n        )\n>       assert_successful_log(\n            logs,\n            function_name=\"createInfoGovAction\",\n            trigger_type=\"MANUAL\",\n            message=\"No successful 'create infoAction proposal' log found\",\n        )\n\ntest_cases/test_agent_functions.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = [{'agentId': 'd315555a-30b5-4b6c-af62-16adca7c3369', 'functionName': 'transferADA', 'instanceIndex': 0, 'message': '',...entId': 'd315555a-30b5-4b6c-af62-16adca7c3369', 'functionName': 'transferADA', 'instanceIndex': 0, 'message': '', ...}]\nfunction_name = 'createInfoGovAction', trigger_type = 'MANUAL'\nmessage = \"No successful 'create infoAction proposal' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n            assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\n        except AssertionError:\n            failed_logs = [log for log in logs if log[\"functionName\"] == function_name]\n    \n            if failed_logs:\n                allure.attach(\n                    str(failed_logs),\n                    name=\"Filtered Logs with Matching Function Name\",\n                    attachment_type=allure.attachment_type.JSON,\n                )\n            else:\n                allure.attach(\n                    \"No log found with the given parameters.\",\n                    name=\"No Matching Logs\",\n                    attachment_type=allure.attachment_type.TEXT,\n                )\n>           raise AssertionError(\n                f\"{message} | Failed Logs: {failed_logs if failed_logs else 'None'}\"\n            )\nE           AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None\n\ntest_cases/test_agent_functions.py:28: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"autonomous_agent_api","time":{"start":1727944092393,"stop":1727944092394,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_login_response","time":{"start":1727944092946,"stop":1727944093064,"duration":118},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_login_cookie","time":{"start":1727944093064,"stop":1727944093064,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_template_fixture","time":{"start":1727944093064,"stop":1727944093197,"duration":133},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"edit_template_fixture","time":{"start":1727944093197,"stop":1727944093333,"duration":136},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_admin_agent_fixture","time":{"start":1727944093333,"stop":1727944093464,"duration":131},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"edit_admin_agent_fixture","time":{"start":1727944093735,"stop":1727944093870,"duration":135},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"load_funds_to_agent_address","time":{"start":1727944093871,"stop":1727944214804,"duration":120933},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"run_admin_agent_fixture","time":{"start":1727944214804,"stop":1727944578278,"duration":363474},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","statusTrace":"logs = [{'agentId': 'd315555a-30b5-4b6c-af62-16adca7c3369', 'functionName': 'transferADA', 'instanceIndex': 0, 'message': '',...entId': 'd315555a-30b5-4b6c-af62-16adca7c3369', 'functionName': 'transferADA', 'instanceIndex': 0, 'message': '', ...}]\nfunction_name = 'createInfoGovAction', trigger_type = 'MANUAL'\nmessage = \"No successful 'create infoAction proposal' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n>           assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\nE           AssertionError: No successful 'create infoAction proposal' log found\nE           assert False\nE            +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7f7f4a9ac740>)\n\ntest_cases/test_agent_functions.py:6: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cases.test_agent_functions.TestAgentFunctionExecution object at 0x7f7f4b134c20>\nrun_admin_agent_fixture = <Response [200]>\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7f7f4b24b830>\n\n    @allure.sub_suite(\"MANUAL\")\n    @allure.title(\"Test Manual Info Action Proposal Logs\")\n    @allure.feature(\"Create Gov Info Action Function\")\n    def test_manual_info_action_proposal_logs(\n        self, run_admin_agent_fixture, autonomous_agent_api\n    ):\n        agent_id = run_admin_agent_fixture.json().get(\"id\")\n        logs = (\n            autonomous_agent_api.get_trigger_history(\n                param=f\"?agent_id={agent_id}&functionName={'createInfoGovAction'}\"\n            )\n            .json()\n            .get(\"items\")\n        )\n>       assert_successful_log(\n            logs,\n            function_name=\"createInfoGovAction\",\n            trigger_type=\"MANUAL\",\n            message=\"No successful 'create infoAction proposal' log found\",\n        )\n\ntest_cases/test_agent_functions.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = [{'agentId': 'd315555a-30b5-4b6c-af62-16adca7c3369', 'functionName': 'transferADA', 'instanceIndex': 0, 'message': '',...entId': 'd315555a-30b5-4b6c-af62-16adca7c3369', 'functionName': 'transferADA', 'instanceIndex': 0, 'message': '', ...}]\nfunction_name = 'createInfoGovAction', trigger_type = 'MANUAL'\nmessage = \"No successful 'create infoAction proposal' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n            assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\n        except AssertionError:\n            failed_logs = [log for log in logs if log[\"functionName\"] == function_name]\n    \n            if failed_logs:\n                allure.attach(\n                    str(failed_logs),\n                    name=\"Filtered Logs with Matching Function Name\",\n                    attachment_type=allure.attachment_type.JSON,\n                )\n            else:\n                allure.attach(\n                    \"No log found with the given parameters.\",\n                    name=\"No Matching Logs\",\n                    attachment_type=allure.attachment_type.TEXT,\n                )\n>           raise AssertionError(\n                f\"{message} | Failed Logs: {failed_logs if failed_logs else 'None'}\"\n            )\nE           AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None\n\ntest_cases/test_agent_functions.py:28: AssertionError","steps":[],"attachments":[{"uid":"20bbc7de14ccff7b","name":"No Matching Logs","source":"20bbc7de14ccff7b.txt","type":"text/plain","size":39}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"autonomous_agent_api::0","time":{"start":1727944580217,"stop":1727944580217,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"parentSuite","value":"Agent Function Execution"},{"name":"feature","value":"Create Gov Info Action Function"},{"name":"subSuite","value":"MANUAL"},{"name":"suite","value":"test_agent_functions"},{"name":"host","value":"fv-az1536-919"},{"name":"thread","value":"1939-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_agent_functions"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":23,"broken":2,"skipped":0,"passed":26,"unknown":0,"total":51},"items":[{"uid":"532723d7f6dda131","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/49//#testresult/532723d7f6dda131","status":"failed","statusDetails":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","time":{"start":1727942896330,"stop":1727942896633,"duration":303}},{"uid":"a41827a35d06e590","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/48//#testresult/a41827a35d06e590","status":"passed","time":{"start":1727841527416,"stop":1727841527653,"duration":237}},{"uid":"e714629bb12b0dcb","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/47//#testresult/e714629bb12b0dcb","status":"passed","time":{"start":1727432537939,"stop":1727432538138,"duration":199}},{"uid":"8adba7e1db00b91e","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/46//#testresult/8adba7e1db00b91e","status":"passed","time":{"start":1727269157755,"stop":1727269158037,"duration":282}},{"uid":"2e3db32d8c70b225","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/45//#testresult/2e3db32d8c70b225","status":"passed","time":{"start":1727260702562,"stop":1727260702821,"duration":259}},{"uid":"5a8de686318748f6","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/44//#testresult/5a8de686318748f6","status":"passed","time":{"start":1727257911986,"stop":1727257912191,"duration":205}},{"uid":"a29aeda7244336d6","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/43//#testresult/a29aeda7244336d6","status":"passed","time":{"start":1727257608054,"stop":1727257608277,"duration":223}},{"uid":"d4791ced4f7830f","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/42//#testresult/d4791ced4f7830f","status":"passed","time":{"start":1727255162318,"stop":1727255162539,"duration":221}},{"uid":"89a1076ecd819480","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/41//#testresult/89a1076ecd819480","status":"passed","time":{"start":1727252533630,"stop":1727252534314,"duration":684}},{"uid":"80f4e90489a06386","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/40//#testresult/80f4e90489a06386","status":"passed","time":{"start":1727252437814,"stop":1727252438079,"duration":265}},{"uid":"9343a7270283cda","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/39//#testresult/9343a7270283cda","status":"passed","time":{"start":1727248097654,"stop":1727248097958,"duration":304}},{"uid":"ddf8ba63a1103ad4","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/38//#testresult/ddf8ba63a1103ad4","status":"failed","statusDetails":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","time":{"start":1727240093552,"stop":1727240093814,"duration":262}},{"uid":"59a1a8ad74e4dc52","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/37//#testresult/59a1a8ad74e4dc52","status":"failed","statusDetails":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","time":{"start":1727185310839,"stop":1727185311080,"duration":241}},{"uid":"b144d15ca1d84d2c","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/36//#testresult/b144d15ca1d84d2c","status":"failed","statusDetails":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","time":{"start":1727177830744,"stop":1727177830978,"duration":234}},{"uid":"94bae2223abdd1c4","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/35//#testresult/94bae2223abdd1c4","status":"failed","statusDetails":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","time":{"start":1727169153454,"stop":1727169153676,"duration":222}},{"uid":"5887993078708ee6","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/34//#testresult/5887993078708ee6","status":"failed","statusDetails":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","time":{"start":1727152502111,"stop":1727152502317,"duration":206}},{"uid":"872a864229f96119","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/34//#testresult/872a864229f96119","status":"failed","statusDetails":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","time":{"start":1727148732737,"stop":1727148732937,"duration":200}},{"uid":"83972e8fe46deb8e","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/34//#testresult/83972e8fe46deb8e","status":"broken","statusDetails":"requests.exceptions.SSLError: HTTPSConnectionPool(host='api.agents.cardanoapi.io', port=443): Max retries exceeded with url: /api/trigger-history?agent_id=cbccb0ca-8534-47ca-95e0-0020248e9820&functionName=createInfoGovAction (Caused by SSLError(SSLEOFError(8, '[SSL: UNEXPECTED_EOF_WHILE_READING] EOF occurred in violation of protocol (_ssl.c:1000)')))","time":{"start":1727088033604,"stop":1727088033831,"duration":227}},{"uid":"4e7dc8b70164e8db","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/33//#testresult/4e7dc8b70164e8db","status":"failed","statusDetails":"AssertionError: Expected POST /templates to succeed but got statusCode: 403 : body: \"Forbidden Request\"","time":{"start":1726811571632,"stop":1726811571632,"duration":0}},{"uid":"9a493af09bde6a62","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/32//#testresult/9a493af09bde6a62","status":"failed","statusDetails":"AssertionError: Expected POST /templates to succeed but got statusCode: 403 : body: \"Forbidden Request\"","time":{"start":1726738987770,"stop":1726738987770,"duration":0}}]},"tags":[]},"source":"fc95993bacc796fb.json","parameterValues":[]}