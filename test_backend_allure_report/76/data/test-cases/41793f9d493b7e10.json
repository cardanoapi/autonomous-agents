{"uid":"41793f9d493b7e10","name":"Test Manual Stake Registration Logs","fullName":"test_cases.test_agent_functions.TestAgentFunctionExecution#test_stake_registration_logs","historyId":"5303b14a2eb3c0648518bffc5208ab10","time":{"start":1731474811480,"stop":1731474811780,"duration":300},"status":"failed","statusMessage":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","statusTrace":"logs = [{'agentId': 'de9752a3-a1de-4872-a715-76db6029f638', 'functionName': 'transferADA', 'instanceIndex': 0, 'internal': No...cbf430c3e35c2ac437983048d8e9401eed16d2f0251c63ee4eb2e2b35253f38a', 'type': 'Witnessed Tx ConwayEra'}, ...}], ...}, ...]\nfunction_name = 'stakeRegistration', trigger_type = 'MANUAL'\nmessage = \"No successful 'create infoAction proposal' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n>           assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\nE           AssertionError: No successful 'create infoAction proposal' log found\nE           assert False\nE            +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7f9d980a8660>)\n\ntest_cases/test_agent_functions.py:6: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cases.test_agent_functions.TestAgentFunctionExecution object at 0x7f9d98850f50>\nrun_admin_agent_fixture = <Response [200]>\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7f9d9876e3c0>\n\n    @allure.sub_suite(\"MANUAL\")\n    @allure.title(\"Test Manual Stake Registration Logs\")\n    @allure.feature(\"Stake Registration Function\")\n    def test_stake_registration_logs(\n        self, run_admin_agent_fixture, autonomous_agent_api\n    ):\n        agent_id = run_admin_agent_fixture.json().get(\"id\")\n        logs = (\n            autonomous_agent_api.get_trigger_history(\n                param=f\"?agent_id={agent_id}&functionName={'stakeRegistration'}\"\n            )\n            .json()\n            .get(\"items\")\n        )\n>       assert_successful_log(\n            logs,\n            function_name=\"stakeRegistration\",\n            trigger_type=\"MANUAL\",\n            message=\"No successful 'create infoAction proposal' log found\",\n        )\n\ntest_cases/test_agent_functions.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = [{'agentId': 'de9752a3-a1de-4872-a715-76db6029f638', 'functionName': 'transferADA', 'instanceIndex': 0, 'internal': No...cbf430c3e35c2ac437983048d8e9401eed16d2f0251c63ee4eb2e2b35253f38a', 'type': 'Witnessed Tx ConwayEra'}, ...}], ...}, ...]\nfunction_name = 'stakeRegistration', trigger_type = 'MANUAL'\nmessage = \"No successful 'create infoAction proposal' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n            assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\n        except AssertionError:\n            failed_logs = [log for log in logs if log[\"functionName\"] == function_name]\n    \n            if failed_logs:\n                allure.attach(\n                    str(failed_logs),\n                    name=\"Filtered Logs with Matching Function Name\",\n                    attachment_type=allure.attachment_type.JSON,\n                )\n            else:\n                allure.attach(\n                    \"No log found with the given parameters.\",\n                    name=\"No Matching Logs\",\n                    attachment_type=allure.attachment_type.TEXT,\n                )\n>           raise AssertionError(\n                f\"{message} | Failed Logs: {failed_logs if failed_logs else 'None'}\"\n            )\nE           AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None\n\ntest_cases/test_agent_functions.py:28: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"autonomous_agent_api","time":{"start":1731474275950,"stop":1731474275951,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_login_response","time":{"start":1731474278491,"stop":1731474278664,"duration":173},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_login_cookie","time":{"start":1731474278664,"stop":1731474278664,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_template_fixture","time":{"start":1731474278664,"stop":1731474278850,"duration":186},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"edit_template_fixture","time":{"start":1731474278850,"stop":1731474279041,"duration":191},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_admin_agent_fixture","time":{"start":1731474279041,"stop":1731474279230,"duration":189},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"edit_admin_agent_fixture","time":{"start":1731474279468,"stop":1731474279716,"duration":248},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_agent_fixture","time":{"start":1731474279718,"stop":1731474279961,"duration":243},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"load_funds_to_agent_address","time":{"start":1731474279961,"stop":1731474401256,"duration":121295},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"run_admin_agent_fixture","time":{"start":1731474401257,"stop":1731474810300,"duration":409043},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","statusTrace":"logs = [{'agentId': 'de9752a3-a1de-4872-a715-76db6029f638', 'functionName': 'transferADA', 'instanceIndex': 0, 'internal': No...cbf430c3e35c2ac437983048d8e9401eed16d2f0251c63ee4eb2e2b35253f38a', 'type': 'Witnessed Tx ConwayEra'}, ...}], ...}, ...]\nfunction_name = 'stakeRegistration', trigger_type = 'MANUAL'\nmessage = \"No successful 'create infoAction proposal' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n>           assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\nE           AssertionError: No successful 'create infoAction proposal' log found\nE           assert False\nE            +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7f9d980a8660>)\n\ntest_cases/test_agent_functions.py:6: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cases.test_agent_functions.TestAgentFunctionExecution object at 0x7f9d98850f50>\nrun_admin_agent_fixture = <Response [200]>\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7f9d9876e3c0>\n\n    @allure.sub_suite(\"MANUAL\")\n    @allure.title(\"Test Manual Stake Registration Logs\")\n    @allure.feature(\"Stake Registration Function\")\n    def test_stake_registration_logs(\n        self, run_admin_agent_fixture, autonomous_agent_api\n    ):\n        agent_id = run_admin_agent_fixture.json().get(\"id\")\n        logs = (\n            autonomous_agent_api.get_trigger_history(\n                param=f\"?agent_id={agent_id}&functionName={'stakeRegistration'}\"\n            )\n            .json()\n            .get(\"items\")\n        )\n>       assert_successful_log(\n            logs,\n            function_name=\"stakeRegistration\",\n            trigger_type=\"MANUAL\",\n            message=\"No successful 'create infoAction proposal' log found\",\n        )\n\ntest_cases/test_agent_functions.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = [{'agentId': 'de9752a3-a1de-4872-a715-76db6029f638', 'functionName': 'transferADA', 'instanceIndex': 0, 'internal': No...cbf430c3e35c2ac437983048d8e9401eed16d2f0251c63ee4eb2e2b35253f38a', 'type': 'Witnessed Tx ConwayEra'}, ...}], ...}, ...]\nfunction_name = 'stakeRegistration', trigger_type = 'MANUAL'\nmessage = \"No successful 'create infoAction proposal' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n            assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\n        except AssertionError:\n            failed_logs = [log for log in logs if log[\"functionName\"] == function_name]\n    \n            if failed_logs:\n                allure.attach(\n                    str(failed_logs),\n                    name=\"Filtered Logs with Matching Function Name\",\n                    attachment_type=allure.attachment_type.JSON,\n                )\n            else:\n                allure.attach(\n                    \"No log found with the given parameters.\",\n                    name=\"No Matching Logs\",\n                    attachment_type=allure.attachment_type.TEXT,\n                )\n>           raise AssertionError(\n                f\"{message} | Failed Logs: {failed_logs if failed_logs else 'None'}\"\n            )\nE           AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None\n\ntest_cases/test_agent_functions.py:28: AssertionError","steps":[],"attachments":[{"uid":"476cad1d351df252","name":"No Matching Logs","source":"476cad1d351df252.txt","type":"text/plain","size":39}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"autonomous_agent_api::0","time":{"start":1731474813203,"stop":1731474813203,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"subSuite","value":"MANUAL"},{"name":"parentSuite","value":"Agent Function Execution"},{"name":"feature","value":"Stake Registration Function"},{"name":"suite","value":"test_agent_functions"},{"name":"host","value":"fv-az1196-870"},{"name":"thread","value":"1900-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_agent_functions"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"41793f9d493b7e10.json","parameterValues":[]}