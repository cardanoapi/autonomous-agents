{"uid":"e3035c274e4a2b9f","name":"Test Cron Transfer ADA Logs","fullName":"test_cases.test_agent_functions.TestAgentFunctionExecution#test_cron_transfer_ada_logs","historyId":"8f129459ef0776a0fa46da5fc475ea3a","time":{"start":1730865940266,"stop":1730865940509,"duration":243},"status":"failed","statusMessage":"AssertionError: No successful 'transferADA' log found | Failed Logs: None","statusTrace":"logs = [], function_name = 'transferADA', trigger_type = 'CRON'\nmessage = \"No successful 'transferADA' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n>           assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\nE           AssertionError: No successful 'transferADA' log found\nE           assert False\nE            +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7faf80b73e60>)\n\ntest_cases/test_agent_functions.py:6: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cases.test_agent_functions.TestAgentFunctionExecution object at 0x7faf8139a150>\nrun_admin_agent_fixture = <Response [200]>\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7faf8215c7d0>\n\n    @allure.sub_suite(\"CRON\")\n    @allure.title(\"Test Cron Transfer ADA Logs\")\n    @allure.feature(\"Transfer Ada Cron Function\")\n    def test_cron_transfer_ada_logs(\n        self, run_admin_agent_fixture, autonomous_agent_api\n    ):\n        agent_id = run_admin_agent_fixture.json().get(\"id\")\n        logs = (\n            autonomous_agent_api.get_trigger_history(\n                param=f\"?agent_id={agent_id}&functionName={'transferADA'}\"\n            )\n            .json()\n            .get(\"items\")\n        )\n>       assert_successful_log(\n            logs,\n            function_name=\"transferADA\",\n            trigger_type=\"CRON\",\n            message=\"No successful 'transferADA' log found\",\n        )\n\ntest_cases/test_agent_functions.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = [], function_name = 'transferADA', trigger_type = 'CRON'\nmessage = \"No successful 'transferADA' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n            assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\n        except AssertionError:\n            failed_logs = [log for log in logs if log[\"functionName\"] == function_name]\n    \n            if failed_logs:\n                allure.attach(\n                    str(failed_logs),\n                    name=\"Filtered Logs with Matching Function Name\",\n                    attachment_type=allure.attachment_type.JSON,\n                )\n            else:\n                allure.attach(\n                    \"No log found with the given parameters.\",\n                    name=\"No Matching Logs\",\n                    attachment_type=allure.attachment_type.TEXT,\n                )\n>           raise AssertionError(\n                f\"{message} | Failed Logs: {failed_logs if failed_logs else 'None'}\"\n            )\nE           AssertionError: No successful 'transferADA' log found | Failed Logs: None\n\ntest_cases/test_agent_functions.py:28: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"autonomous_agent_api","time":{"start":1730865453286,"stop":1730865453287,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_login_response","time":{"start":1730865455579,"stop":1730865455699,"duration":120},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_login_cookie","time":{"start":1730865455699,"stop":1730865455699,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_template_fixture","time":{"start":1730865455699,"stop":1730865455831,"duration":132},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"edit_template_fixture","time":{"start":1730865455831,"stop":1730865455971,"duration":140},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_admin_agent_fixture","time":{"start":1730865455971,"stop":1730865456108,"duration":137},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"edit_admin_agent_fixture","time":{"start":1730865456302,"stop":1730865456490,"duration":188},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"load_funds_to_agent_address","time":{"start":1730865456492,"stop":1730865577442,"duration":120950},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"run_admin_agent_fixture","time":{"start":1730865577443,"stop":1730865939720,"duration":362277},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: No successful 'transferADA' log found | Failed Logs: None","statusTrace":"logs = [], function_name = 'transferADA', trigger_type = 'CRON'\nmessage = \"No successful 'transferADA' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n>           assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\nE           AssertionError: No successful 'transferADA' log found\nE           assert False\nE            +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7faf80b73e60>)\n\ntest_cases/test_agent_functions.py:6: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cases.test_agent_functions.TestAgentFunctionExecution object at 0x7faf8139a150>\nrun_admin_agent_fixture = <Response [200]>\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7faf8215c7d0>\n\n    @allure.sub_suite(\"CRON\")\n    @allure.title(\"Test Cron Transfer ADA Logs\")\n    @allure.feature(\"Transfer Ada Cron Function\")\n    def test_cron_transfer_ada_logs(\n        self, run_admin_agent_fixture, autonomous_agent_api\n    ):\n        agent_id = run_admin_agent_fixture.json().get(\"id\")\n        logs = (\n            autonomous_agent_api.get_trigger_history(\n                param=f\"?agent_id={agent_id}&functionName={'transferADA'}\"\n            )\n            .json()\n            .get(\"items\")\n        )\n>       assert_successful_log(\n            logs,\n            function_name=\"transferADA\",\n            trigger_type=\"CRON\",\n            message=\"No successful 'transferADA' log found\",\n        )\n\ntest_cases/test_agent_functions.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = [], function_name = 'transferADA', trigger_type = 'CRON'\nmessage = \"No successful 'transferADA' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n            assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\n        except AssertionError:\n            failed_logs = [log for log in logs if log[\"functionName\"] == function_name]\n    \n            if failed_logs:\n                allure.attach(\n                    str(failed_logs),\n                    name=\"Filtered Logs with Matching Function Name\",\n                    attachment_type=allure.attachment_type.JSON,\n                )\n            else:\n                allure.attach(\n                    \"No log found with the given parameters.\",\n                    name=\"No Matching Logs\",\n                    attachment_type=allure.attachment_type.TEXT,\n                )\n>           raise AssertionError(\n                f\"{message} | Failed Logs: {failed_logs if failed_logs else 'None'}\"\n            )\nE           AssertionError: No successful 'transferADA' log found | Failed Logs: None\n\ntest_cases/test_agent_functions.py:28: AssertionError","steps":[],"attachments":[{"uid":"f9e08128cc26af8c","name":"No Matching Logs","source":"f9e08128cc26af8c.txt","type":"text/plain","size":39}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"autonomous_agent_api::0","time":{"start":1730865941759,"stop":1730865941759,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"parentSuite","value":"Agent Function Execution"},{"name":"feature","value":"Transfer Ada Cron Function"},{"name":"subSuite","value":"CRON"},{"name":"suite","value":"test_agent_functions"},{"name":"host","value":"fv-az1446-602"},{"name":"thread","value":"1898-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_agent_functions"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":27,"broken":16,"skipped":0,"passed":32,"unknown":0,"total":75},"items":[{"uid":"751936495016cba7","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/73//#testresult/751936495016cba7","status":"failed","statusDetails":"AssertionError: No successful 'transferADA' log found | Failed Logs: None","time":{"start":1730186918381,"stop":1730186918674,"duration":293}},{"uid":"2296589570935f6e","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/72//#testresult/2296589570935f6e","status":"passed","time":{"start":1730186748529,"stop":1730186748766,"duration":237}},{"uid":"a95ac438008f462a","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/71//#testresult/a95ac438008f462a","status":"broken","statusDetails":"requests.exceptions.SSLError: HTTPSConnectionPool(host='api.agents.cardanoapi.io', port=443): Max retries exceeded with url: /api/auth/login (Caused by SSLError(SSLCertVerificationError(1, \"[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'api.agents.cardanoapi.io'. (_ssl.c:1000)\")))","time":{"start":1729748684617,"stop":1729748684617,"duration":0}},{"uid":"5dedc5a5c87cbc3f","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/70//#testresult/5dedc5a5c87cbc3f","status":"broken","statusDetails":"requests.exceptions.SSLError: HTTPSConnectionPool(host='api.agents.cardanoapi.io', port=443): Max retries exceeded with url: /api/auth/login (Caused by SSLError(SSLCertVerificationError(1, \"[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'api.agents.cardanoapi.io'. (_ssl.c:1000)\")))","time":{"start":1729680163114,"stop":1729680163114,"duration":0}},{"uid":"8a7d74aebb656722","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/69//#testresult/8a7d74aebb656722","status":"broken","statusDetails":"requests.exceptions.SSLError: HTTPSConnectionPool(host='api.agents.cardanoapi.io', port=443): Max retries exceeded with url: /api/auth/login (Caused by SSLError(SSLCertVerificationError(1, \"[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'api.agents.cardanoapi.io'. (_ssl.c:1000)\")))","time":{"start":1729679365616,"stop":1729679365616,"duration":0}},{"uid":"3bad00801b45342f","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/68//#testresult/3bad00801b45342f","status":"broken","statusDetails":"requests.exceptions.SSLError: HTTPSConnectionPool(host='api.agents.cardanoapi.io', port=443): Max retries exceeded with url: /api/auth/login (Caused by SSLError(SSLCertVerificationError(1, \"[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'api.agents.cardanoapi.io'. (_ssl.c:1000)\")))","time":{"start":1729672197379,"stop":1729672197379,"duration":0}},{"uid":"8a8d864d008aacf0","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/67//#testresult/8a8d864d008aacf0","status":"broken","statusDetails":"requests.exceptions.SSLError: HTTPSConnectionPool(host='api.agents.cardanoapi.io', port=443): Max retries exceeded with url: /api/auth/login (Caused by SSLError(SSLCertVerificationError(1, \"[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'api.agents.cardanoapi.io'. (_ssl.c:1000)\")))","time":{"start":1729667682382,"stop":1729667682382,"duration":0}},{"uid":"a2c1a9a4e04c83d0","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/66//#testresult/a2c1a9a4e04c83d0","status":"broken","statusDetails":"requests.exceptions.SSLError: HTTPSConnectionPool(host='api.agents.cardanoapi.io', port=443): Max retries exceeded with url: /api/auth/login (Caused by SSLError(SSLCertVerificationError(1, \"[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'api.agents.cardanoapi.io'. (_ssl.c:1000)\")))","time":{"start":1729664171788,"stop":1729664171788,"duration":0}},{"uid":"1d510e4f1873a6f4","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/65//#testresult/1d510e4f1873a6f4","status":"broken","statusDetails":"requests.exceptions.SSLError: HTTPSConnectionPool(host='api.agents.cardanoapi.io', port=443): Max retries exceeded with url: /api/auth/login (Caused by SSLError(SSLCertVerificationError(1, \"[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'api.agents.cardanoapi.io'. (_ssl.c:1000)\")))","time":{"start":1729574248137,"stop":1729574248137,"duration":0}},{"uid":"b5b706add31308ed","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/64//#testresult/b5b706add31308ed","status":"broken","statusDetails":"requests.exceptions.SSLError: HTTPSConnectionPool(host='api.agents.cardanoapi.io', port=443): Max retries exceeded with url: /api/auth/login (Caused by SSLError(SSLCertVerificationError(1, \"[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'api.agents.cardanoapi.io'. (_ssl.c:1000)\")))","time":{"start":1729508364423,"stop":1729508364423,"duration":0}},{"uid":"e701e3670f04283f","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/63//#testresult/e701e3670f04283f","status":"broken","statusDetails":"requests.exceptions.SSLError: HTTPSConnectionPool(host='api.agents.cardanoapi.io', port=443): Max retries exceeded with url: /api/auth/login (Caused by SSLError(SSLCertVerificationError(1, \"[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'api.agents.cardanoapi.io'. (_ssl.c:1000)\")))","time":{"start":1729506658720,"stop":1729506658720,"duration":0}},{"uid":"d6ea7ee420fdf689","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/62//#testresult/d6ea7ee420fdf689","status":"broken","statusDetails":"requests.exceptions.SSLError: HTTPSConnectionPool(host='api.agents.cardanoapi.io', port=443): Max retries exceeded with url: /api/auth/login (Caused by SSLError(SSLCertVerificationError(1, \"[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'api.agents.cardanoapi.io'. (_ssl.c:1000)\")))","time":{"start":1729245928882,"stop":1729245928882,"duration":0}},{"uid":"2dc3a3b7373bd034","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/61//#testresult/2dc3a3b7373bd034","status":"broken","statusDetails":"requests.exceptions.SSLError: HTTPSConnectionPool(host='api.agents.cardanoapi.io', port=443): Max retries exceeded with url: /api/auth/login (Caused by SSLError(SSLCertVerificationError(1, \"[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'api.agents.cardanoapi.io'. (_ssl.c:1000)\")))","time":{"start":1728386491645,"stop":1728386491645,"duration":0}},{"uid":"4147af62307045c9","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/60//#testresult/4147af62307045c9","status":"broken","statusDetails":"requests.exceptions.SSLError: HTTPSConnectionPool(host='api.agents.cardanoapi.io', port=443): Max retries exceeded with url: /api/auth/login (Caused by SSLError(SSLCertVerificationError(1, \"[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'api.agents.cardanoapi.io'. (_ssl.c:1000)\")))","time":{"start":1728380137543,"stop":1728380137543,"duration":0}},{"uid":"30baf3e448e28c7c","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/59//#testresult/30baf3e448e28c7c","status":"broken","statusDetails":"requests.exceptions.SSLError: HTTPSConnectionPool(host='api.agents.cardanoapi.io', port=443): Max retries exceeded with url: /api/auth/login (Caused by SSLError(SSLCertVerificationError(1, \"[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'api.agents.cardanoapi.io'. (_ssl.c:1000)\")))","time":{"start":1728370091737,"stop":1728370091737,"duration":0}},{"uid":"3fe0697ce134c4f1","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/58//#testresult/3fe0697ce134c4f1","status":"failed","statusDetails":"AssertionError: Expected POST /auth/login to succeed but got statusCode: 503 : body: <html>\r\n<head><title>503 Service Temporarily Unavailable</title></head>\r\n<body>\r\n<center><h1>503 Service Temporarily Unavailable</h1></center>\r\n<hr><center>nginx/1.23.2</center>\r\n</body>\r\n</html>","time":{"start":1728362223841,"stop":1728362223841,"duration":0}},{"uid":"e21b0b7c6ae35175","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/57//#testresult/e21b0b7c6ae35175","status":"failed","statusDetails":"AssertionError: Expected POST /auth/login to succeed but got statusCode: 503 : body: <html>\r\n<head><title>503 Service Temporarily Unavailable</title></head>\r\n<body>\r\n<center><h1>503 Service Temporarily Unavailable</h1></center>\r\n<hr><center>nginx/1.23.2</center>\r\n</body>\r\n</html>","time":{"start":1728055093154,"stop":1728055093154,"duration":0}},{"uid":"e145050926473e3e","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/56//#testresult/e145050926473e3e","status":"failed","statusDetails":"AssertionError: Expected POST /auth/login to succeed but got statusCode: 503 : body: <html>\r\n<head><title>503 Service Temporarily Unavailable</title></head>\r\n<body>\r\n<center><h1>503 Service Temporarily Unavailable</h1></center>\r\n<hr><center>nginx/1.23.2</center>\r\n</body>\r\n</html>","time":{"start":1728054163835,"stop":1728054163835,"duration":0}},{"uid":"78f6c1d418742459","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/55//#testresult/78f6c1d418742459","status":"failed","statusDetails":"AssertionError: Expected POST /auth/login to succeed but got statusCode: 503 : body: <html>\r\n<head><title>503 Service Temporarily Unavailable</title></head>\r\n<body>\r\n<center><h1>503 Service Temporarily Unavailable</h1></center>\r\n<hr><center>nginx/1.23.2</center>\r\n</body>\r\n</html>","time":{"start":1728031538220,"stop":1728031538220,"duration":0}},{"uid":"87fd43f2a7021a64","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/54//#testresult/87fd43f2a7021a64","status":"failed","statusDetails":"AssertionError: Expected POST /auth/login to succeed but got statusCode: 503 : body: <html>\r\n<head><title>503 Service Temporarily Unavailable</title></head>\r\n<body>\r\n<center><h1>503 Service Temporarily Unavailable</h1></center>\r\n<hr><center>nginx/1.23.2</center>\r\n</body>\r\n</html>","time":{"start":1728022312789,"stop":1728022312789,"duration":0}}]},"tags":[]},"source":"e3035c274e4a2b9f.json","parameterValues":[]}