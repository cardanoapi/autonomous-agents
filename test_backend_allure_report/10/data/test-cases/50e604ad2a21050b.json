{"uid":"50e604ad2a21050b","name":"Test Manual Info Action Proposal Logs","fullName":"test_cases.test_agent_functions.TestAgentFunctionExecution#test_manual_info_action_proposal_logs","historyId":"011c6a73c3f72f6a7ca823b0704e81e3","time":{"start":1725615363532,"stop":1725615363802,"duration":270},"status":"failed","statusMessage":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","statusTrace":"logs = [{'agentId': '1ea877da-ef44-4e46-b914-b28f27f6ee29', 'functionName': 'transferADA', 'message': '', 'status': False, .....'agentId': '1ea877da-ef44-4e46-b914-b28f27f6ee29', 'functionName': 'transferADA', 'message': '', 'status': False, ...}]\nfunction_name = 'createInfoGovAction', trigger_type = 'MANUAL'\nmessage = \"No successful 'create infoAction proposal' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n>           assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\nE           AssertionError: No successful 'create infoAction proposal' log found\nE           assert False\nE            +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7fdb07b70200>)\n\ntest_cases/test_agent_functions.py:6: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cases.test_agent_functions.TestAgentFunctionExecution object at 0x7fdb08522660>\nrun_admin_agent_fixture = <Response [200]>\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7fdb093220c0>\n\n    @allure.sub_suite(\"MANUAL\")\n    @allure.title(\"Test Manual Info Action Proposal Logs\")\n    @allure.feature(\"Create Gov Info Action Function\")\n    def test_manual_info_action_proposal_logs(\n        self, run_admin_agent_fixture, autonomous_agent_api\n    ):\n        agent_id = run_admin_agent_fixture.json().get(\"id\")\n        logs = (\n            autonomous_agent_api.get_trigger_history(\n                param=f\"?agent_id={agent_id}&functionName={'createInfoGovAction'}\"\n            )\n            .json()\n            .get(\"items\")\n        )\n>       assert_successful_log(\n            logs,\n            function_name=\"createInfoGovAction\",\n            trigger_type=\"MANUAL\",\n            message=\"No successful 'create infoAction proposal' log found\",\n        )\n\ntest_cases/test_agent_functions.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = [{'agentId': '1ea877da-ef44-4e46-b914-b28f27f6ee29', 'functionName': 'transferADA', 'message': '', 'status': False, .....'agentId': '1ea877da-ef44-4e46-b914-b28f27f6ee29', 'functionName': 'transferADA', 'message': '', 'status': False, ...}]\nfunction_name = 'createInfoGovAction', trigger_type = 'MANUAL'\nmessage = \"No successful 'create infoAction proposal' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n            assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\n        except AssertionError:\n            failed_logs = [log for log in logs if log[\"functionName\"] == function_name]\n    \n            if failed_logs:\n                allure.attach(\n                    str(failed_logs),\n                    name=\"Filtered Logs with Matching Function Name\",\n                    attachment_type=allure.attachment_type.JSON,\n                )\n            else:\n                allure.attach(\n                    \"No log found with the given parameters.\",\n                    name=\"No Matching Logs\",\n                    attachment_type=allure.attachment_type.TEXT,\n                )\n>           raise AssertionError(\n                f\"{message} | Failed Logs: {failed_logs if failed_logs else 'None'}\"\n            )\nE           AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None\n\ntest_cases/test_agent_functions.py:28: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"autonomous_agent_api","time":{"start":1725615100910,"stop":1725615100910,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_login_response","time":{"start":1725615101608,"stop":1725615101786,"duration":178},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_login_cookie","time":{"start":1725615101786,"stop":1725615101787,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_template_fixture","time":{"start":1725615101787,"stop":1725615101976,"duration":189},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"edit_template_fixture","time":{"start":1725615101976,"stop":1725615102174,"duration":198},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_admin_agent_fixture","time":{"start":1725615102174,"stop":1725615102363,"duration":189},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"edit_admin_agent_fixture","time":{"start":1725615102760,"stop":1725615102966,"duration":206},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"load_funds_to_agent_address","time":{"start":1725615102968,"stop":1725615224602,"duration":121634},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"run_admin_agent_fixture","time":{"start":1725615224602,"stop":1725615362630,"duration":138028},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","statusTrace":"logs = [{'agentId': '1ea877da-ef44-4e46-b914-b28f27f6ee29', 'functionName': 'transferADA', 'message': '', 'status': False, .....'agentId': '1ea877da-ef44-4e46-b914-b28f27f6ee29', 'functionName': 'transferADA', 'message': '', 'status': False, ...}]\nfunction_name = 'createInfoGovAction', trigger_type = 'MANUAL'\nmessage = \"No successful 'create infoAction proposal' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n>           assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\nE           AssertionError: No successful 'create infoAction proposal' log found\nE           assert False\nE            +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7fdb07b70200>)\n\ntest_cases/test_agent_functions.py:6: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cases.test_agent_functions.TestAgentFunctionExecution object at 0x7fdb08522660>\nrun_admin_agent_fixture = <Response [200]>\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7fdb093220c0>\n\n    @allure.sub_suite(\"MANUAL\")\n    @allure.title(\"Test Manual Info Action Proposal Logs\")\n    @allure.feature(\"Create Gov Info Action Function\")\n    def test_manual_info_action_proposal_logs(\n        self, run_admin_agent_fixture, autonomous_agent_api\n    ):\n        agent_id = run_admin_agent_fixture.json().get(\"id\")\n        logs = (\n            autonomous_agent_api.get_trigger_history(\n                param=f\"?agent_id={agent_id}&functionName={'createInfoGovAction'}\"\n            )\n            .json()\n            .get(\"items\")\n        )\n>       assert_successful_log(\n            logs,\n            function_name=\"createInfoGovAction\",\n            trigger_type=\"MANUAL\",\n            message=\"No successful 'create infoAction proposal' log found\",\n        )\n\ntest_cases/test_agent_functions.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = [{'agentId': '1ea877da-ef44-4e46-b914-b28f27f6ee29', 'functionName': 'transferADA', 'message': '', 'status': False, .....'agentId': '1ea877da-ef44-4e46-b914-b28f27f6ee29', 'functionName': 'transferADA', 'message': '', 'status': False, ...}]\nfunction_name = 'createInfoGovAction', trigger_type = 'MANUAL'\nmessage = \"No successful 'create infoAction proposal' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n            assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\n        except AssertionError:\n            failed_logs = [log for log in logs if log[\"functionName\"] == function_name]\n    \n            if failed_logs:\n                allure.attach(\n                    str(failed_logs),\n                    name=\"Filtered Logs with Matching Function Name\",\n                    attachment_type=allure.attachment_type.JSON,\n                )\n            else:\n                allure.attach(\n                    \"No log found with the given parameters.\",\n                    name=\"No Matching Logs\",\n                    attachment_type=allure.attachment_type.TEXT,\n                )\n>           raise AssertionError(\n                f\"{message} | Failed Logs: {failed_logs if failed_logs else 'None'}\"\n            )\nE           AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None\n\ntest_cases/test_agent_functions.py:28: AssertionError","steps":[],"attachments":[{"uid":"1b109acad8e82297","name":"No Matching Logs","source":"1b109acad8e82297.txt","type":"text/plain","size":39}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"autonomous_agent_api::0","time":{"start":1725615365201,"stop":1725615365201,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"Create Gov Info Action Function"},{"name":"parentSuite","value":"Agent Function Execution"},{"name":"subSuite","value":"MANUAL"},{"name":"suite","value":"test_agent_functions"},{"name":"host","value":"fv-az1269-967"},{"name":"thread","value":"1995-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_agent_functions"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":9,"unknown":0,"total":11},"items":[{"uid":"8fabb62837e87f7f","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/9//#testresult/8fabb62837e87f7f","status":"failed","statusDetails":"AssertionError: No successful 'create infoAction proposal' log found | Failed Logs: None","time":{"start":1725615331928,"stop":1725615332215,"duration":287}},{"uid":"ce60efd4f415bda6","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/8//#testresult/ce60efd4f415bda6","status":"passed","time":{"start":1724135315047,"stop":1724135315265,"duration":218}},{"uid":"52c99fe643db070b","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/7//#testresult/52c99fe643db070b","status":"passed","time":{"start":1724134686794,"stop":1724134687039,"duration":245}},{"uid":"c629c1ecaa82c0b0","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/6//#testresult/c629c1ecaa82c0b0","status":"passed","time":{"start":1724133854788,"stop":1724133855067,"duration":279}},{"uid":"f1ee80cfbfcc5508","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/5//#testresult/f1ee80cfbfcc5508","status":"passed","time":{"start":1724132698751,"stop":1724132698969,"duration":218}},{"uid":"5209e798f19cd7dc","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/4//#testresult/5209e798f19cd7dc","status":"passed","time":{"start":1723720438373,"stop":1723720438600,"duration":227}},{"uid":"aba65bc58227b69b","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/3//#testresult/aba65bc58227b69b","status":"passed","time":{"start":1723719853262,"stop":1723719853521,"duration":259}},{"uid":"6e9b41a19386906f","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/2//#testresult/6e9b41a19386906f","status":"passed","time":{"start":1723717605116,"stop":1723717605360,"duration":244}},{"uid":"e6578075434dbdf7","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/1//#testresult/e6578075434dbdf7","status":"passed","time":{"start":1723716845903,"stop":1723716846199,"duration":296}},{"uid":"be101082d49932e3","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/1//#testresult/be101082d49932e3","status":"passed","time":{"start":1723716209647,"stop":1723716209952,"duration":305}}]},"tags":[]},"source":"50e604ad2a21050b.json","parameterValues":[]}