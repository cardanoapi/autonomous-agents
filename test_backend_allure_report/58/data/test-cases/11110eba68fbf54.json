{"uid":"11110eba68fbf54","name":"Test Agents List","fullName":"test_cases.test_agent.TestAgentManagement#test_agents_list","historyId":"765acc991ec56447f966e3885e76d93c","time":{"start":1728362223067,"stop":1728362223639,"duration":572},"status":"failed","statusMessage":"AssertionError: Expected GET /agents to succeed but got statusCode: 503 : body: <html>\r\n<head><title>503 Service Temporarily Unavailable</title></head>\r\n<body>\r\n<center><h1>503 Service Temporarily Unavailable</h1></center>\r\n<hr><center>nginx/1.23.2</center>\r\n</body>\r\n</html>","statusTrace":"self = <test_cases.test_agent.TestAgentManagement object at 0x7f411ee18080>\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7f411fc12330>\n\n    @allure.title(\"Test Agents List\")\n    @allure.feature(\"Agents List\")\n    def test_agents_list(self, autonomous_agent_api):\n>       response = autonomous_agent_api.agents_list()\n\ntest_cases/test_agent.py:10: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlib/autonomous_agent_api.py:96: in agents_list\n    return self._get(\"/agents\", headers=headers)\nlib/autonomous_agent_api.py:58: in _get\n    return self._request(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7f411fc12330>\nmethod = 'GET', endpoint = '/agents', param = None, body = None, headers = None\n\n    def _request(\n        self,\n        method: str,\n        endpoint: str,\n        param: Any | None = None,\n        body: Any | None = None,\n        headers: dict | None = None,\n    ) -> Response:\n        endpoint = endpoint if endpoint.startswith(\"/\") else f\"/{endpoint}\"\n        full_url = self._base_url + endpoint\n        full_url_with_parms = full_url + param if param else full_url\n    \n        response = self._session.request(\n            method=method, url=full_url_with_parms, json=body, headers=headers\n        )\n    \n        try:\n            response_json = response.json()\n            response_json_str = json.dumps(response_json)[:200]\n        except:\n            response_json_str = \"Response not as Expected. Something is Wrong\"\n    \n        request_info = {\n            \"method\": method,\n            \"endpoint\": endpoint,\n            \"path_param\": param,\n            \"json\": json.dumps(body),\n            \"status_code\": response.status_code,\n            \"response_json\": response_json_str,\n        }\n    \n        self.requests_log.append(request_info)\n    \n>       assert (\n            200 <= response.status_code <= 299\n        ), f\"Expected {method} {endpoint} to succeed but got statusCode: {response.status_code} : body: {response.text}\"\nE       AssertionError: Expected GET /agents to succeed but got statusCode: 503 : body: <html>\r\nE       <head><title>503 Service Temporarily Unavailable</title></head>\r\nE       <body>\r\nE       <center><h1>503 Service Temporarily Unavailable</h1></center>\r\nE       <hr><center>nginx/1.23.2</center>\r\nE       </body>\r\nE       </html>\n\nlib/autonomous_agent_api.py:49: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"autonomous_agent_api","time":{"start":1728362223066,"stop":1728362223066,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected GET /agents to succeed but got statusCode: 503 : body: <html>\r\n<head><title>503 Service Temporarily Unavailable</title></head>\r\n<body>\r\n<center><h1>503 Service Temporarily Unavailable</h1></center>\r\n<hr><center>nginx/1.23.2</center>\r\n</body>\r\n</html>","statusTrace":"self = <test_cases.test_agent.TestAgentManagement object at 0x7f411ee18080>\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7f411fc12330>\n\n    @allure.title(\"Test Agents List\")\n    @allure.feature(\"Agents List\")\n    def test_agents_list(self, autonomous_agent_api):\n>       response = autonomous_agent_api.agents_list()\n\ntest_cases/test_agent.py:10: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlib/autonomous_agent_api.py:96: in agents_list\n    return self._get(\"/agents\", headers=headers)\nlib/autonomous_agent_api.py:58: in _get\n    return self._request(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7f411fc12330>\nmethod = 'GET', endpoint = '/agents', param = None, body = None, headers = None\n\n    def _request(\n        self,\n        method: str,\n        endpoint: str,\n        param: Any | None = None,\n        body: Any | None = None,\n        headers: dict | None = None,\n    ) -> Response:\n        endpoint = endpoint if endpoint.startswith(\"/\") else f\"/{endpoint}\"\n        full_url = self._base_url + endpoint\n        full_url_with_parms = full_url + param if param else full_url\n    \n        response = self._session.request(\n            method=method, url=full_url_with_parms, json=body, headers=headers\n        )\n    \n        try:\n            response_json = response.json()\n            response_json_str = json.dumps(response_json)[:200]\n        except:\n            response_json_str = \"Response not as Expected. Something is Wrong\"\n    \n        request_info = {\n            \"method\": method,\n            \"endpoint\": endpoint,\n            \"path_param\": param,\n            \"json\": json.dumps(body),\n            \"status_code\": response.status_code,\n            \"response_json\": response_json_str,\n        }\n    \n        self.requests_log.append(request_info)\n    \n>       assert (\n            200 <= response.status_code <= 299\n        ), f\"Expected {method} {endpoint} to succeed but got statusCode: {response.status_code} : body: {response.text}\"\nE       AssertionError: Expected GET /agents to succeed but got statusCode: 503 : body: <html>\r\nE       <head><title>503 Service Temporarily Unavailable</title></head>\r\nE       <body>\r\nE       <center><h1>503 Service Temporarily Unavailable</h1></center>\r\nE       <hr><center>nginx/1.23.2</center>\r\nE       </body>\r\nE       </html>\n\nlib/autonomous_agent_api.py:49: AssertionError","steps":[],"attachments":[{"uid":"6122c50f3d02006d","name":"stdout","source":"6122c50f3d02006d.txt","type":"text/plain","size":7975}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"autonomous_agent_api::0","time":{"start":1728362224241,"stop":1728362224241,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"parentSuite","value":"Agent Management"},{"name":"feature","value":"Agents List"},{"name":"suite","value":"test_agent"},{"name":"subSuite","value":"TestAgentManagement"},{"name":"host","value":"fv-az770-527"},{"name":"thread","value":"2045-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_agent"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":0,"skipped":0,"passed":54,"unknown":0,"total":59},"items":[{"uid":"3c7339457383e5ac","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/57//#testresult/3c7339457383e5ac","status":"failed","statusDetails":"AssertionError: Expected GET /agents to succeed but got statusCode: 503 : body: <html>\r\n<head><title>503 Service Temporarily Unavailable</title></head>\r\n<body>\r\n<center><h1>503 Service Temporarily Unavailable</h1></center>\r\n<hr><center>nginx/1.23.2</center>\r\n</body>\r\n</html>","time":{"start":1728055092433,"stop":1728055092968,"duration":535}},{"uid":"e6b068e5afa3949c","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/56//#testresult/e6b068e5afa3949c","status":"failed","statusDetails":"AssertionError: Expected GET /agents to succeed but got statusCode: 503 : body: <html>\r\n<head><title>503 Service Temporarily Unavailable</title></head>\r\n<body>\r\n<center><h1>503 Service Temporarily Unavailable</h1></center>\r\n<hr><center>nginx/1.23.2</center>\r\n</body>\r\n</html>","time":{"start":1728054162926,"stop":1728054163596,"duration":670}},{"uid":"9e96a537641fb0c4","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/55//#testresult/9e96a537641fb0c4","status":"failed","statusDetails":"AssertionError: Expected GET /agents to succeed but got statusCode: 503 : body: <html>\r\n<head><title>503 Service Temporarily Unavailable</title></head>\r\n<body>\r\n<center><h1>503 Service Temporarily Unavailable</h1></center>\r\n<hr><center>nginx/1.23.2</center>\r\n</body>\r\n</html>","time":{"start":1728031537497,"stop":1728031538033,"duration":536}},{"uid":"3e5114c636573bcd","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/54//#testresult/3e5114c636573bcd","status":"failed","statusDetails":"AssertionError: Expected GET /agents to succeed but got statusCode: 503 : body: <html>\r\n<head><title>503 Service Temporarily Unavailable</title></head>\r\n<body>\r\n<center><h1>503 Service Temporarily Unavailable</h1></center>\r\n<hr><center>nginx/1.23.2</center>\r\n</body>\r\n</html>","time":{"start":1728022312018,"stop":1728022312580,"duration":562}},{"uid":"2de3c5ada18ce315","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/53//#testresult/2de3c5ada18ce315","status":"passed","time":{"start":1728020021259,"stop":1728020021665,"duration":406}},{"uid":"f06b77bd5295e8dc","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/52//#testresult/f06b77bd5295e8dc","status":"passed","time":{"start":1728019909779,"stop":1728019910352,"duration":573}},{"uid":"21bfcca9eec47459","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/51//#testresult/21bfcca9eec47459","status":"passed","time":{"start":1728015132398,"stop":1728015132933,"duration":535}},{"uid":"611667772d02d02c","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/50//#testresult/611667772d02d02c","status":"passed","time":{"start":1727944092394,"stop":1727944092945,"duration":551}},{"uid":"210353f41b55c7fd","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/49//#testresult/210353f41b55c7fd","status":"passed","time":{"start":1727942409123,"stop":1727942409740,"duration":617}},{"uid":"123d283e7b8f4590","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/48//#testresult/123d283e7b8f4590","status":"passed","time":{"start":1727841040859,"stop":1727841041416,"duration":557}},{"uid":"97dd0814db3f8bab","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/47//#testresult/97dd0814db3f8bab","status":"passed","time":{"start":1727432052105,"stop":1727432052556,"duration":451}},{"uid":"8993dde653f80d0d","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/46//#testresult/8993dde653f80d0d","status":"passed","time":{"start":1727268670165,"stop":1727268670869,"duration":704}},{"uid":"1098efdf58e5ad8c","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/45//#testresult/1098efdf58e5ad8c","status":"passed","time":{"start":1727260216631,"stop":1727260217242,"duration":611}},{"uid":"299ae44c505b83f3","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/44//#testresult/299ae44c505b83f3","status":"passed","time":{"start":1727257425748,"stop":1727257426299,"duration":551}},{"uid":"c1811c688198e460","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/43//#testresult/c1811c688198e460","status":"passed","time":{"start":1727257121103,"stop":1727257121842,"duration":739}},{"uid":"1335f9ea8509b005","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/42//#testresult/1335f9ea8509b005","status":"passed","time":{"start":1727254676361,"stop":1727254676805,"duration":444}},{"uid":"94f1b6433d5fb415","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/41//#testresult/94f1b6433d5fb415","status":"passed","time":{"start":1727252047329,"stop":1727252047925,"duration":596}},{"uid":"56d7488628942403","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/40//#testresult/56d7488628942403","status":"passed","time":{"start":1727251950679,"stop":1727251951411,"duration":732}},{"uid":"1757be1a21432885","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/39//#testresult/1757be1a21432885","status":"passed","time":{"start":1727247610349,"stop":1727247610991,"duration":642}},{"uid":"ae371dc6466be326","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/38//#testresult/ae371dc6466be326","status":"passed","time":{"start":1727239604160,"stop":1727239605834,"duration":1674}}]},"tags":[]},"source":"11110eba68fbf54.json","parameterValues":[]}