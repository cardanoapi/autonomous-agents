{"uid":"af5001189f4eb896","name":"Test Event Vote Logs","fullName":"test_cases.test_agent_functions.TestAgentFunctionExecution#test_event_vote_logs","historyId":"b479afaeccaeb0b2b306544ea95f6f33","time":{"start":1727942896666,"stop":1727942896979,"duration":313},"status":"failed","statusMessage":"AssertionError: No successful 'voteEvent' log found | Failed Logs: None","statusTrace":"logs = [{'agentId': '29f8cf02-efd9-46c5-9aa2-ee3cf80d8c17', 'functionName': 'transferADA', 'instanceIndex': 0, 'message': '',...entId': '29f8cf02-efd9-46c5-9aa2-ee3cf80d8c17', 'functionName': 'transferADA', 'instanceIndex': 0, 'message': '', ...}]\nfunction_name = 'voteOnProposal', trigger_type = 'EVENT'\nmessage = \"No successful 'voteEvent' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n>           assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\nE           AssertionError: No successful 'voteEvent' log found\nE           assert False\nE            +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7f7e8f878f20>)\n\ntest_cases/test_agent_functions.py:6: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cases.test_agent_functions.TestAgentFunctionExecution object at 0x7f7e90175490>\nrun_admin_agent_fixture = <Response [200]>\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7f7e9009b830>\n\n    @allure.sub_suite(\"EVENT\")\n    @allure.title(\"Test Event Vote Logs\")\n    @allure.feature(\"Vote Event Function\")\n    def test_event_vote_logs(self, run_admin_agent_fixture, autonomous_agent_api):\n        agent_id = run_admin_agent_fixture.json().get(\"id\")\n        logs = (\n            autonomous_agent_api.get_trigger_history(\n                param=\"?agent_id=\" + str(agent_id) + \"&functionName=voteOnProposal\"\n            )\n            .json()\n            .get(\"items\")\n        )\n>       assert_successful_log(\n            logs,\n            function_name=\"voteOnProposal\",\n            trigger_type=\"EVENT\",\n            message=\"No successful 'voteEvent' log found\",\n        )\n\ntest_cases/test_agent_functions.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = [{'agentId': '29f8cf02-efd9-46c5-9aa2-ee3cf80d8c17', 'functionName': 'transferADA', 'instanceIndex': 0, 'message': '',...entId': '29f8cf02-efd9-46c5-9aa2-ee3cf80d8c17', 'functionName': 'transferADA', 'instanceIndex': 0, 'message': '', ...}]\nfunction_name = 'voteOnProposal', trigger_type = 'EVENT'\nmessage = \"No successful 'voteEvent' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n            assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\n        except AssertionError:\n            failed_logs = [log for log in logs if log[\"functionName\"] == function_name]\n    \n            if failed_logs:\n                allure.attach(\n                    str(failed_logs),\n                    name=\"Filtered Logs with Matching Function Name\",\n                    attachment_type=allure.attachment_type.JSON,\n                )\n            else:\n                allure.attach(\n                    \"No log found with the given parameters.\",\n                    name=\"No Matching Logs\",\n                    attachment_type=allure.attachment_type.TEXT,\n                )\n>           raise AssertionError(\n                f\"{message} | Failed Logs: {failed_logs if failed_logs else 'None'}\"\n            )\nE           AssertionError: No successful 'voteEvent' log found | Failed Logs: None\n\ntest_cases/test_agent_functions.py:28: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"autonomous_agent_api","time":{"start":1727942409122,"stop":1727942409123,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_login_response","time":{"start":1727942409742,"stop":1727942409927,"duration":185},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_login_cookie","time":{"start":1727942409927,"stop":1727942409927,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_template_fixture","time":{"start":1727942409927,"stop":1727942410125,"duration":198},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"edit_template_fixture","time":{"start":1727942410125,"stop":1727942410332,"duration":207},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_admin_agent_fixture","time":{"start":1727942410332,"stop":1727942410524,"duration":192},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"edit_admin_agent_fixture","time":{"start":1727942410887,"stop":1727942411098,"duration":211},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"load_funds_to_agent_address","time":{"start":1727942411099,"stop":1727942532436,"duration":121337},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"run_admin_agent_fixture","time":{"start":1727942532436,"stop":1727942895313,"duration":362877},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: No successful 'voteEvent' log found | Failed Logs: None","statusTrace":"logs = [{'agentId': '29f8cf02-efd9-46c5-9aa2-ee3cf80d8c17', 'functionName': 'transferADA', 'instanceIndex': 0, 'message': '',...entId': '29f8cf02-efd9-46c5-9aa2-ee3cf80d8c17', 'functionName': 'transferADA', 'instanceIndex': 0, 'message': '', ...}]\nfunction_name = 'voteOnProposal', trigger_type = 'EVENT'\nmessage = \"No successful 'voteEvent' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n>           assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\nE           AssertionError: No successful 'voteEvent' log found\nE           assert False\nE            +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7f7e8f878f20>)\n\ntest_cases/test_agent_functions.py:6: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cases.test_agent_functions.TestAgentFunctionExecution object at 0x7f7e90175490>\nrun_admin_agent_fixture = <Response [200]>\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7f7e9009b830>\n\n    @allure.sub_suite(\"EVENT\")\n    @allure.title(\"Test Event Vote Logs\")\n    @allure.feature(\"Vote Event Function\")\n    def test_event_vote_logs(self, run_admin_agent_fixture, autonomous_agent_api):\n        agent_id = run_admin_agent_fixture.json().get(\"id\")\n        logs = (\n            autonomous_agent_api.get_trigger_history(\n                param=\"?agent_id=\" + str(agent_id) + \"&functionName=voteOnProposal\"\n            )\n            .json()\n            .get(\"items\")\n        )\n>       assert_successful_log(\n            logs,\n            function_name=\"voteOnProposal\",\n            trigger_type=\"EVENT\",\n            message=\"No successful 'voteEvent' log found\",\n        )\n\ntest_cases/test_agent_functions.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = [{'agentId': '29f8cf02-efd9-46c5-9aa2-ee3cf80d8c17', 'functionName': 'transferADA', 'instanceIndex': 0, 'message': '',...entId': '29f8cf02-efd9-46c5-9aa2-ee3cf80d8c17', 'functionName': 'transferADA', 'instanceIndex': 0, 'message': '', ...}]\nfunction_name = 'voteOnProposal', trigger_type = 'EVENT'\nmessage = \"No successful 'voteEvent' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n            assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\n        except AssertionError:\n            failed_logs = [log for log in logs if log[\"functionName\"] == function_name]\n    \n            if failed_logs:\n                allure.attach(\n                    str(failed_logs),\n                    name=\"Filtered Logs with Matching Function Name\",\n                    attachment_type=allure.attachment_type.JSON,\n                )\n            else:\n                allure.attach(\n                    \"No log found with the given parameters.\",\n                    name=\"No Matching Logs\",\n                    attachment_type=allure.attachment_type.TEXT,\n                )\n>           raise AssertionError(\n                f\"{message} | Failed Logs: {failed_logs if failed_logs else 'None'}\"\n            )\nE           AssertionError: No successful 'voteEvent' log found | Failed Logs: None\n\ntest_cases/test_agent_functions.py:28: AssertionError","steps":[],"attachments":[{"uid":"71c8644a946e164f","name":"No Matching Logs","source":"71c8644a946e164f.txt","type":"text/plain","size":39}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"autonomous_agent_api::0","time":{"start":1727942898139,"stop":1727942898139,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"subSuite","value":"EVENT"},{"name":"feature","value":"Vote Event Function"},{"name":"parentSuite","value":"Agent Function Execution"},{"name":"suite","value":"test_agent_functions"},{"name":"host","value":"fv-az1385-659"},{"name":"thread","value":"1967-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_agent_functions"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":33,"broken":0,"skipped":0,"passed":17,"unknown":0,"total":50},"items":[{"uid":"bc2c13ced5743cf5","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/48//#testresult/bc2c13ced5743cf5","status":"passed","time":{"start":1727841527654,"stop":1727841527901,"duration":247}},{"uid":"32e1c65c9c7ed58a","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/47//#testresult/32e1c65c9c7ed58a","status":"passed","time":{"start":1727432538139,"stop":1727432538337,"duration":198}},{"uid":"ce1217b572b9d1f","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/46//#testresult/ce1217b572b9d1f","status":"passed","time":{"start":1727269158038,"stop":1727269158320,"duration":282}},{"uid":"57f7da402c7c5fc3","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/45//#testresult/57f7da402c7c5fc3","status":"passed","time":{"start":1727260702823,"stop":1727260703108,"duration":285}},{"uid":"c3fa849aa2c6e9c1","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/44//#testresult/c3fa849aa2c6e9c1","status":"failed","statusDetails":"AssertionError: No successful 'voteEvent' log found | Failed Logs: [{'agentId': 'c8d94e5c-9065-49ca-97d5-8e374c719c8b', 'functionName': 'voteOnProposal', 'status': True, 'success': False, 'timestamp': '2024-09-25T09:46:37.367000+00:00', 'message': \"Cannot read properties of undefined (reading 'url')\", 'triggerType': 'EVENT', 'txHash': None, 'instanceIndex': 0}]","time":{"start":1727257912192,"stop":1727257912400,"duration":208}},{"uid":"216d50b81f9b6b44","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/43//#testresult/216d50b81f9b6b44","status":"failed","statusDetails":"AssertionError: No successful 'voteEvent' log found | Failed Logs: [{'agentId': '6647b11e-6b76-4230-bec8-7ee28000308d', 'functionName': 'voteOnProposal', 'status': True, 'success': False, 'timestamp': '2024-09-25T09:46:37.363000+00:00', 'message': \"Cannot read properties of undefined (reading 'url')\", 'triggerType': 'EVENT', 'txHash': None, 'instanceIndex': 0}, {'agentId': '6647b11e-6b76-4230-bec8-7ee28000308d', 'functionName': 'voteOnProposal', 'status': True, 'success': False, 'timestamp': '2024-09-25T09:42:03.456000+00:00', 'message': \"Cannot read properties of undefined (reading 'url')\", 'triggerType': 'EVENT', 'txHash': None, 'instanceIndex': 0}]","time":{"start":1727257608278,"stop":1727257608505,"duration":227}},{"uid":"881e08ffe6ba9943","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/42//#testresult/881e08ffe6ba9943","status":"failed","statusDetails":"AssertionError: No successful 'voteEvent' log found | Failed Logs: [{'agentId': 'cda7c975-e177-4b50-bcdd-d2f7429f345c', 'functionName': 'voteOnProposal', 'status': True, 'success': False, 'timestamp': '2024-09-25T09:05:17.358000+00:00', 'message': \"Cannot read properties of undefined (reading 'url')\", 'triggerType': 'EVENT', 'txHash': None, 'instanceIndex': 0}, {'agentId': 'cda7c975-e177-4b50-bcdd-d2f7429f345c', 'functionName': 'voteOnProposal', 'status': True, 'success': False, 'timestamp': '2024-09-25T09:01:34.675000+00:00', 'message': \"Cannot read properties of undefined (reading 'url')\", 'triggerType': 'EVENT', 'txHash': None, 'instanceIndex': 0}, {'agentId': 'cda7c975-e177-4b50-bcdd-d2f7429f345c', 'functionName': 'voteOnProposal', 'status': True, 'success': False, 'timestamp': '2024-09-25T09:01:21.372000+00:00', 'message': \"Cannot read properties of undefined (reading 'url')\", 'triggerType': 'EVENT', 'txHash': None, 'instanceIndex': 0}]","time":{"start":1727255162540,"stop":1727255162756,"duration":216}},{"uid":"73d5a9f4395736e7","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/41//#testresult/73d5a9f4395736e7","status":"failed","statusDetails":"AssertionError: No successful 'voteEvent' log found | Failed Logs: [{'agentId': 'a25cfd68-3562-47d5-a099-c036dc4b14cb', 'functionName': 'voteOnProposal', 'status': True, 'success': False, 'timestamp': '2024-09-25T08:17:04.350000+00:00', 'message': \"Cannot read properties of undefined (reading 'url')\", 'triggerType': 'EVENT', 'txHash': None, 'instanceIndex': 0}]","time":{"start":1727252534315,"stop":1727252534523,"duration":208}},{"uid":"88b3ee991c27af23","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/40//#testresult/88b3ee991c27af23","status":"failed","statusDetails":"AssertionError: No successful 'voteEvent' log found | Failed Logs: [{'agentId': '20fb53a0-b21b-4222-bef5-f5aeca914e43', 'functionName': 'voteOnProposal', 'status': True, 'success': False, 'timestamp': '2024-09-25T08:17:04.469000+00:00', 'message': \"Cannot read properties of undefined (reading 'url')\", 'triggerType': 'EVENT', 'txHash': None, 'instanceIndex': 0}, {'agentId': '20fb53a0-b21b-4222-bef5-f5aeca914e43', 'functionName': 'voteOnProposal', 'status': True, 'success': False, 'timestamp': '2024-09-25T08:15:37.100000+00:00', 'message': \"Cannot read properties of undefined (reading 'url')\", 'triggerType': 'EVENT', 'txHash': None, 'instanceIndex': 0}]","time":{"start":1727252438080,"stop":1727252438350,"duration":270}},{"uid":"4a2672a434869af4","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/39//#testresult/4a2672a434869af4","status":"failed","statusDetails":"AssertionError: No successful 'voteEvent' log found | Failed Logs: [{'agentId': '93f025d8-4b68-45b9-a45d-34c3d18ca9de', 'functionName': 'voteOnProposal', 'status': True, 'success': False, 'timestamp': '2024-09-25T07:03:36.733000+00:00', 'message': \"Cannot read properties of undefined (reading 'url')\", 'triggerType': 'EVENT', 'txHash': None, 'instanceIndex': 0}]","time":{"start":1727248097959,"stop":1727248098248,"duration":289}},{"uid":"570f8d58bc0a53b0","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/38//#testresult/570f8d58bc0a53b0","status":"failed","statusDetails":"AssertionError: No successful 'voteEvent' log found | Failed Logs: None","time":{"start":1727240093820,"stop":1727240094075,"duration":255}},{"uid":"3e102581c6bca073","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/37//#testresult/3e102581c6bca073","status":"failed","statusDetails":"AssertionError: No successful 'voteEvent' log found | Failed Logs: None","time":{"start":1727185311085,"stop":1727185311314,"duration":229}},{"uid":"6c66dbba7b1f136","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/36//#testresult/6c66dbba7b1f136","status":"failed","statusDetails":"AssertionError: No successful 'voteEvent' log found | Failed Logs: None","time":{"start":1727177830984,"stop":1727177831217,"duration":233}},{"uid":"5185c32d22a28357","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/35//#testresult/5185c32d22a28357","status":"failed","statusDetails":"AssertionError: No successful 'voteEvent' log found | Failed Logs: None","time":{"start":1727169153682,"stop":1727169153906,"duration":224}},{"uid":"e1a585f972b501d6","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/34//#testresult/e1a585f972b501d6","status":"failed","statusDetails":"AssertionError: No successful 'voteEvent' log found | Failed Logs: None","time":{"start":1727152502322,"stop":1727152502527,"duration":205}},{"uid":"7d4044701f90a0d7","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/34//#testresult/7d4044701f90a0d7","status":"failed","statusDetails":"AssertionError: No successful 'voteEvent' log found | Failed Logs: None","time":{"start":1727148732943,"stop":1727148733146,"duration":203}},{"uid":"862a4a22da1537fc","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/34//#testresult/862a4a22da1537fc","status":"failed","statusDetails":"AssertionError: Expected GET /trigger-history to succeed but got statusCode: 500 : body: <html>\r\n<head><title>500 Internal Server Error</title></head>\r\n<body>\r\n<center><h1>500 Internal Server Error</h1></center>\r\n<hr><center>nginx/1.23.2</center>\r\n</body>\r\n</html>","time":{"start":1727088033942,"stop":1727088034307,"duration":365}},{"uid":"e64c174a14c6d1d2","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/33//#testresult/e64c174a14c6d1d2","status":"failed","statusDetails":"AssertionError: Expected POST /templates to succeed but got statusCode: 403 : body: \"Forbidden Request\"","time":{"start":1726811571643,"stop":1726811571643,"duration":0}},{"uid":"c2237c532f28a240","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/32//#testresult/c2237c532f28a240","status":"failed","statusDetails":"AssertionError: Expected POST /templates to succeed but got statusCode: 403 : body: \"Forbidden Request\"","time":{"start":1726738987781,"stop":1726738987781,"duration":0}},{"uid":"6e0f95324875fb29","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/31//#testresult/6e0f95324875fb29","status":"failed","statusDetails":"AssertionError: Expected POST /templates to succeed but got statusCode: 403 : body: \"Forbidden Request\"","time":{"start":1726730682634,"stop":1726730682634,"duration":0}}]},"tags":[]},"source":"af5001189f4eb896.json","parameterValues":[]}