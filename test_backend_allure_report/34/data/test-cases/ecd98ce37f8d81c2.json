{"uid":"ecd98ce37f8d81c2","name":"Test Admin Logout","fullName":"test_cases.test_auth.TestAdminAuthentication#test_admin_logout","historyId":"f3a838b08baad92152078eb3339eeab2","time":{"start":1727088034763,"stop":1727088038168,"duration":3405},"status":"failed","statusMessage":"AssertionError: Expected POST /auth/logout to succeed but got statusCode: 502 : body: <html>\r\n<head><title>502 Bad Gateway</title></head>\r\n<body>\r\n<center><h1>502 Bad Gateway</h1></center>\r\n<hr><center>nginx/1.23.2</center>\r\n</body>\r\n</html>","statusTrace":"self = <test_cases.test_auth.TestAdminAuthentication object at 0x7fd69be35610>\nadmin_login_cookie = 'access_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2FkZHJlc3MiOiIxYjkxZjA4MDBjZTg2M2FiYzJiM2NjODUzMjFkMmM4ZDU...rYOu4; Domain=api.agents.cardanoapi.io; expires=Tue, 08 Oct 2024 10:32:08 GMT; HttpOnly; Path=/; SameSite=None; Secure'\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7fd69ca1c1d0>\n\n    @allure.title(\"Test Admin Logout\")\n    @allure.feature(\"Admin Logout\")\n    def test_admin_logout(self, admin_login_cookie, autonomous_agent_api):\n>       response = autonomous_agent_api.logout_user(\n            headers={\"Cookie\": admin_login_cookie}\n        )\n\ntest_cases/test_auth.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlib/autonomous_agent_api.py:151: in logout_user\n    return self._post(\"/auth/logout\", headers=headers)\nlib/autonomous_agent_api.py:80: in _post\n    return self._request(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7fd69ca1c1d0>\nmethod = 'POST', endpoint = '/auth/logout', param = None, body = None\nheaders = {'Cookie': 'access_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2FkZHJlc3MiOiIxYjkxZjA4MDBjZTg2M2FiYzJiM2NjODUz...YOu4; Domain=api.agents.cardanoapi.io; expires=Tue, 08 Oct 2024 10:32:08 GMT; HttpOnly; Path=/; SameSite=None; Secure'}\n\n    def _request(\n        self,\n        method: str,\n        endpoint: str,\n        param: Any | None = None,\n        body: Any | None = None,\n        headers: dict | None = None,\n    ) -> Response:\n        endpoint = endpoint if endpoint.startswith(\"/\") else f\"/{endpoint}\"\n        full_url = self._base_url + endpoint\n        full_url_with_parms = full_url + param if param else full_url\n    \n        response = self._session.request(\n            method=method, url=full_url_with_parms, json=body, headers=headers\n        )\n    \n        try:\n            response_json = response.json()\n            response_json_str = json.dumps(response_json)[:200]\n        except:\n            response_json_str = \"Response not as Expected. Something is Wrong\"\n    \n        request_info = {\n            \"method\": method,\n            \"endpoint\": endpoint,\n            \"path_param\": param,\n            \"json\": json.dumps(body),\n            \"status_code\": response.status_code,\n            \"response_json\": response_json_str,\n        }\n    \n        self.requests_log.append(request_info)\n    \n>       assert (\n            200 <= response.status_code <= 299\n        ), f\"Expected {method} {endpoint} to succeed but got statusCode: {response.status_code} : body: {response.text}\"\nE       AssertionError: Expected POST /auth/logout to succeed but got statusCode: 502 : body: <html>\r\nE       <head><title>502 Bad Gateway</title></head>\r\nE       <body>\r\nE       <center><h1>502 Bad Gateway</h1></center>\r\nE       <hr><center>nginx/1.23.2</center>\r\nE       </body>\r\nE       </html>\n\nlib/autonomous_agent_api.py:49: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"autonomous_agent_api","time":{"start":1727087528218,"stop":1727087528218,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_login_response","time":{"start":1727087528736,"stop":1727087528854,"duration":118},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_login_cookie","time":{"start":1727087528854,"stop":1727087528854,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"afterStages":[{"name":"autonomous_agent_api::0","time":{"start":1727088038901,"stop":1727088038901,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"parentSuite","value":"Admin Authentication"},{"name":"feature","value":"Admin Logout"},{"name":"suite","value":"test_auth"},{"name":"subSuite","value":"TestAdminAuthentication"},{"name":"host","value":"fv-az2028-359"},{"name":"thread","value":"1943-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_auth"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":32,"unknown":0,"total":33},"items":[{"uid":"e41b86c79f226b51","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/33//#testresult/e41b86c79f226b51","status":"passed","time":{"start":1726811571905,"stop":1726811572024,"duration":119}},{"uid":"24b6f5afdfdbd0d0","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/32//#testresult/24b6f5afdfdbd0d0","status":"passed","time":{"start":1726738988041,"stop":1726738988159,"duration":118}},{"uid":"ca638759a1c7b9c5","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/31//#testresult/ca638759a1c7b9c5","status":"passed","time":{"start":1726730683017,"stop":1726730683195,"duration":178}},{"uid":"d7d67c9e9ad6ff87","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/30//#testresult/d7d67c9e9ad6ff87","status":"passed","time":{"start":1726730664422,"stop":1726730664539,"duration":117}},{"uid":"1db0fa78741b1e6","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/29//#testresult/1db0fa78741b1e6","status":"passed","time":{"start":1726655638796,"stop":1726655638926,"duration":130}},{"uid":"12112eaadf9dffef","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/28//#testresult/12112eaadf9dffef","status":"passed","time":{"start":1726572394990,"stop":1726572395167,"duration":177}},{"uid":"1ca961ecf472d9c9","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/27//#testresult/1ca961ecf472d9c9","status":"passed","time":{"start":1726571194261,"stop":1726571194391,"duration":130}},{"uid":"2106eb6a2c98a75","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/26//#testresult/2106eb6a2c98a75","status":"passed","time":{"start":1726555653997,"stop":1726555654127,"duration":130}},{"uid":"21443561de5bd179","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/25//#testresult/21443561de5bd179","status":"passed","time":{"start":1726554684834,"stop":1726554685011,"duration":177}},{"uid":"3758b0cf514d69fb","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/24//#testresult/3758b0cf514d69fb","status":"passed","time":{"start":1726552150683,"stop":1726552150860,"duration":177}},{"uid":"a37df65fcf23b32e","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/23//#testresult/a37df65fcf23b32e","status":"passed","time":{"start":1726475580911,"stop":1726475581088,"duration":177}},{"uid":"36d2ea16f105b3ff","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/22//#testresult/36d2ea16f105b3ff","status":"passed","time":{"start":1726461466623,"stop":1726461466741,"duration":118}},{"uid":"8717929c63fe2295","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/19//#testresult/8717929c63fe2295","status":"passed","time":{"start":1726056110663,"stop":1726056110795,"duration":132}},{"uid":"ad91fea07485d3e6","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/18//#testresult/ad91fea07485d3e6","status":"passed","time":{"start":1726051674907,"stop":1726051675037,"duration":130}},{"uid":"1931e5fb95fcd23f","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/17//#testresult/1931e5fb95fcd23f","status":"passed","time":{"start":1726047884715,"stop":1726047884845,"duration":130}},{"uid":"ea35eeed158760b4","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/16//#testresult/ea35eeed158760b4","status":"passed","time":{"start":1726037915956,"stop":1726037916087,"duration":131}},{"uid":"2e3c073611992944","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/15//#testresult/2e3c073611992944","status":"passed","time":{"start":1726031420245,"stop":1726031420362,"duration":117}},{"uid":"976d6c1e06363ed8","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/14//#testresult/976d6c1e06363ed8","status":"passed","time":{"start":1725963147996,"stop":1725963148174,"duration":178}},{"uid":"546a436318c4b150","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/13//#testresult/546a436318c4b150","status":"passed","time":{"start":1725950967325,"stop":1725950967444,"duration":119}},{"uid":"a4c4b8e11de4a2b8","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/12//#testresult/a4c4b8e11de4a2b8","status":"passed","time":{"start":1725869819104,"stop":1725869819222,"duration":118}}]},"tags":[]},"source":"ecd98ce37f8d81c2.json","parameterValues":[]}