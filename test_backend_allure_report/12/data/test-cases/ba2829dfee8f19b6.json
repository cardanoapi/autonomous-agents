{"uid":"ba2829dfee8f19b6","name":"Test Event Vote Logs","fullName":"test_cases.test_agent_functions.TestAgentFunctionExecution#test_event_vote_logs","historyId":"b479afaeccaeb0b2b306544ea95f6f33","time":{"start":1725869818628,"stop":1725869818851,"duration":223},"status":"failed","statusMessage":"AssertionError: No successful 'voteEvent' log found | Failed Logs: None","statusTrace":"logs = [], function_name = 'voteOnProposal', trigger_type = 'EVENT'\nmessage = \"No successful 'voteEvent' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n>           assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\nE           AssertionError: No successful 'voteEvent' log found\nE           assert False\nE            +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7f438624d2a0>)\n\ntest_cases/test_agent_functions.py:6: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cases.test_agent_functions.TestAgentFunctionExecution object at 0x7f4386b82300>\nrun_admin_agent_fixture = <Response [200]>\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7f4386b9bbc0>\n\n    @allure.sub_suite(\"EVENT\")\n    @allure.title(\"Test Event Vote Logs\")\n    @allure.feature(\"Vote Event Function\")\n    def test_event_vote_logs(self, run_admin_agent_fixture, autonomous_agent_api):\n        agent_id = run_admin_agent_fixture.json().get(\"id\")\n        logs = (\n            autonomous_agent_api.get_trigger_history(\n                param=\"?agent_id=\" + str(agent_id) + \"&functionName=voteOnProposal\"\n            )\n            .json()\n            .get(\"items\")\n        )\n>       assert_successful_log(\n            logs,\n            function_name=\"voteOnProposal\",\n            trigger_type=\"EVENT\",\n            message=\"No successful 'voteEvent' log found\",\n        )\n\ntest_cases/test_agent_functions.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = [], function_name = 'voteOnProposal', trigger_type = 'EVENT'\nmessage = \"No successful 'voteEvent' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n            assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\n        except AssertionError:\n            failed_logs = [log for log in logs if log[\"functionName\"] == function_name]\n    \n            if failed_logs:\n                allure.attach(\n                    str(failed_logs),\n                    name=\"Filtered Logs with Matching Function Name\",\n                    attachment_type=allure.attachment_type.JSON,\n                )\n            else:\n                allure.attach(\n                    \"No log found with the given parameters.\",\n                    name=\"No Matching Logs\",\n                    attachment_type=allure.attachment_type.TEXT,\n                )\n>           raise AssertionError(\n                f\"{message} | Failed Logs: {failed_logs if failed_logs else 'None'}\"\n            )\nE           AssertionError: No successful 'voteEvent' log found | Failed Logs: None\n\ntest_cases/test_agent_functions.py:28: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"autonomous_agent_api","time":{"start":1725869556793,"stop":1725869556793,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_login_response","time":{"start":1725869557370,"stop":1725869557497,"duration":127},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_template_fixture","time":{"start":1725869557497,"stop":1725869557629,"duration":132},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_login_cookie","time":{"start":1725869557497,"stop":1725869557497,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"edit_template_fixture","time":{"start":1725869557629,"stop":1725869557770,"duration":141},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_admin_agent_fixture","time":{"start":1725869557770,"stop":1725869557903,"duration":133},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"edit_admin_agent_fixture","time":{"start":1725869558273,"stop":1725869558426,"duration":153},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"load_funds_to_agent_address","time":{"start":1725869558428,"stop":1725869679921,"duration":121493},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"run_admin_agent_fixture","time":{"start":1725869679922,"stop":1725869817586,"duration":137664},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: No successful 'voteEvent' log found | Failed Logs: None","statusTrace":"logs = [], function_name = 'voteOnProposal', trigger_type = 'EVENT'\nmessage = \"No successful 'voteEvent' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n>           assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\nE           AssertionError: No successful 'voteEvent' log found\nE           assert False\nE            +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7f438624d2a0>)\n\ntest_cases/test_agent_functions.py:6: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cases.test_agent_functions.TestAgentFunctionExecution object at 0x7f4386b82300>\nrun_admin_agent_fixture = <Response [200]>\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7f4386b9bbc0>\n\n    @allure.sub_suite(\"EVENT\")\n    @allure.title(\"Test Event Vote Logs\")\n    @allure.feature(\"Vote Event Function\")\n    def test_event_vote_logs(self, run_admin_agent_fixture, autonomous_agent_api):\n        agent_id = run_admin_agent_fixture.json().get(\"id\")\n        logs = (\n            autonomous_agent_api.get_trigger_history(\n                param=\"?agent_id=\" + str(agent_id) + \"&functionName=voteOnProposal\"\n            )\n            .json()\n            .get(\"items\")\n        )\n>       assert_successful_log(\n            logs,\n            function_name=\"voteOnProposal\",\n            trigger_type=\"EVENT\",\n            message=\"No successful 'voteEvent' log found\",\n        )\n\ntest_cases/test_agent_functions.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = [], function_name = 'voteOnProposal', trigger_type = 'EVENT'\nmessage = \"No successful 'voteEvent' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n            assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\n        except AssertionError:\n            failed_logs = [log for log in logs if log[\"functionName\"] == function_name]\n    \n            if failed_logs:\n                allure.attach(\n                    str(failed_logs),\n                    name=\"Filtered Logs with Matching Function Name\",\n                    attachment_type=allure.attachment_type.JSON,\n                )\n            else:\n                allure.attach(\n                    \"No log found with the given parameters.\",\n                    name=\"No Matching Logs\",\n                    attachment_type=allure.attachment_type.TEXT,\n                )\n>           raise AssertionError(\n                f\"{message} | Failed Logs: {failed_logs if failed_logs else 'None'}\"\n            )\nE           AssertionError: No successful 'voteEvent' log found | Failed Logs: None\n\ntest_cases/test_agent_functions.py:28: AssertionError","steps":[],"attachments":[{"uid":"f2b105302dd2de37","name":"No Matching Logs","source":"f2b105302dd2de37.txt","type":"text/plain","size":39}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"autonomous_agent_api::0","time":{"start":1725869819634,"stop":1725869819634,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"subSuite","value":"EVENT"},{"name":"parentSuite","value":"Agent Function Execution"},{"name":"feature","value":"Vote Event Function"},{"name":"suite","value":"test_agent_functions"},{"name":"host","value":"fv-az1776-218"},{"name":"thread","value":"1919-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_agent_functions"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":0,"skipped":0,"passed":7,"unknown":0,"total":13},"items":[{"uid":"500620b6e0d9d5bb","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/11//#testresult/500620b6e0d9d5bb","status":"failed","statusDetails":"AssertionError: No successful 'voteEvent' log found | Failed Logs: [{'agentId': 'c6e8931e-45d0-431f-a00d-5c8c769d0c2e', 'functionName': 'voteOnProposal', 'status': True, 'success': False, 'timestamp': '2024-09-06T09:48:12.770000+00:00', 'message': 'KubærApi [Status 400] : ShelleyTxValidationError ShelleyBasedEraConway (ApplyTxError (ConwayUtxowFailure (UtxoFailure (ValueNotConservedUTxO (MaryValue (Coin 0) (MultiAsset (fromList []))) (MaryValue (Coin 79999652234) (MultiAsset (fromList []))))) :| [ConwayUtxowFailure (UtxoFailure (BadInputsUTxO (fromList [TxIn (TxId {unTxId = SafeHash \"ef15bd0d8fa8cc169711f568ac757f7a0dbf72aa467459cfa702e58c7e8dcdb8\"}) (TxIx {unTxIx = 1})])))]))', 'triggerType': 'EVENT', 'txHash': None}]","time":{"start":1725616132650,"stop":1725616133137,"duration":487}},{"uid":"55a1f853d764d966","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/10//#testresult/55a1f853d764d966","status":"failed","statusDetails":"AssertionError: No successful 'voteEvent' log found | Failed Logs: None","time":{"start":1725615363808,"stop":1725615364094,"duration":286}},{"uid":"1f7f9e14df210c05","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/9//#testresult/1f7f9e14df210c05","status":"failed","statusDetails":"AssertionError: No successful 'voteEvent' log found | Failed Logs: None","time":{"start":1725615332250,"stop":1725615332529,"duration":279}},{"uid":"7bf57747d00eb077","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/8//#testresult/7bf57747d00eb077","status":"passed","time":{"start":1724135315266,"stop":1724135315463,"duration":197}},{"uid":"2e98e0255c6013ad","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/7//#testresult/2e98e0255c6013ad","status":"passed","time":{"start":1724134687041,"stop":1724134687276,"duration":235}},{"uid":"2d527a53297b6639","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/6//#testresult/2d527a53297b6639","status":"passed","time":{"start":1724133855068,"stop":1724133855343,"duration":275}},{"uid":"d708bd89f7127d3b","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/5//#testresult/d708bd89f7127d3b","status":"failed","statusDetails":"AssertionError: No successful 'voteEvent' log found\nassert False\n +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7fea5d97ef80>)","time":{"start":1724132698971,"stop":1724132699186,"duration":215}},{"uid":"879ad3c3a39d22dc","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/4//#testresult/879ad3c3a39d22dc","status":"passed","time":{"start":1723720438602,"stop":1723720438820,"duration":218}},{"uid":"afeb673fdf0af18c","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/3//#testresult/afeb673fdf0af18c","status":"passed","time":{"start":1723719853522,"stop":1723719853774,"duration":252}},{"uid":"9d60faa2bde518b0","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/2//#testresult/9d60faa2bde518b0","status":"failed","statusDetails":"AssertionError: No successful 'voteEvent' log found\nassert False\n +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7f69feb826c0>)","time":{"start":1723717605361,"stop":1723717605572,"duration":211}},{"uid":"ed78846e1d89f07e","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/1//#testresult/ed78846e1d89f07e","status":"passed","time":{"start":1723716846200,"stop":1723716846504,"duration":304}},{"uid":"f6a989994f41c5ea","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/1//#testresult/f6a989994f41c5ea","status":"passed","time":{"start":1723716209953,"stop":1723716210253,"duration":300}}]},"tags":[]},"source":"ba2829dfee8f19b6.json","parameterValues":[]}