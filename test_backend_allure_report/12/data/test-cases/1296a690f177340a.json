{"uid":"1296a690f177340a","name":"Test Cron Transfer ADA Logs","fullName":"test_cases.test_agent_functions.TestAgentFunctionExecution#test_cron_transfer_ada_logs","historyId":"8f129459ef0776a0fa46da5fc475ea3a","time":{"start":1725869818073,"stop":1725869818342,"duration":269},"status":"failed","statusMessage":"AssertionError: No successful 'transferADA' log found | Failed Logs: None","statusTrace":"logs = [], function_name = 'transferADA', trigger_type = 'CRON'\nmessage = \"No successful 'transferADA' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n>           assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\nE           AssertionError: No successful 'transferADA' log found\nE           assert False\nE            +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7f4386378740>)\n\ntest_cases/test_agent_functions.py:6: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cases.test_agent_functions.TestAgentFunctionExecution object at 0x7f43869834d0>\nrun_admin_agent_fixture = <Response [200]>\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7f4386b9bbc0>\n\n    @allure.sub_suite(\"CRON\")\n    @allure.title(\"Test Cron Transfer ADA Logs\")\n    @allure.feature(\"Transfer Ada Cron Function\")\n    def test_cron_transfer_ada_logs(\n        self, run_admin_agent_fixture, autonomous_agent_api\n    ):\n        agent_id = run_admin_agent_fixture.json().get(\"id\")\n        logs = (\n            autonomous_agent_api.get_trigger_history(\n                param=f\"?agent_id={agent_id}&functionName={'transferADA'}\"\n            )\n            .json()\n            .get(\"items\")\n        )\n>       assert_successful_log(\n            logs,\n            function_name=\"transferADA\",\n            trigger_type=\"CRON\",\n            message=\"No successful 'transferADA' log found\",\n        )\n\ntest_cases/test_agent_functions.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = [], function_name = 'transferADA', trigger_type = 'CRON'\nmessage = \"No successful 'transferADA' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n            assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\n        except AssertionError:\n            failed_logs = [log for log in logs if log[\"functionName\"] == function_name]\n    \n            if failed_logs:\n                allure.attach(\n                    str(failed_logs),\n                    name=\"Filtered Logs with Matching Function Name\",\n                    attachment_type=allure.attachment_type.JSON,\n                )\n            else:\n                allure.attach(\n                    \"No log found with the given parameters.\",\n                    name=\"No Matching Logs\",\n                    attachment_type=allure.attachment_type.TEXT,\n                )\n>           raise AssertionError(\n                f\"{message} | Failed Logs: {failed_logs if failed_logs else 'None'}\"\n            )\nE           AssertionError: No successful 'transferADA' log found | Failed Logs: None\n\ntest_cases/test_agent_functions.py:28: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"autonomous_agent_api","time":{"start":1725869556793,"stop":1725869556793,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_login_response","time":{"start":1725869557370,"stop":1725869557497,"duration":127},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_template_fixture","time":{"start":1725869557497,"stop":1725869557629,"duration":132},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"admin_login_cookie","time":{"start":1725869557497,"stop":1725869557497,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"edit_template_fixture","time":{"start":1725869557629,"stop":1725869557770,"duration":141},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_admin_agent_fixture","time":{"start":1725869557770,"stop":1725869557903,"duration":133},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"edit_admin_agent_fixture","time":{"start":1725869558273,"stop":1725869558426,"duration":153},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"load_funds_to_agent_address","time":{"start":1725869558428,"stop":1725869679921,"duration":121493},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"run_admin_agent_fixture","time":{"start":1725869679922,"stop":1725869817586,"duration":137664},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: No successful 'transferADA' log found | Failed Logs: None","statusTrace":"logs = [], function_name = 'transferADA', trigger_type = 'CRON'\nmessage = \"No successful 'transferADA' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n>           assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\nE           AssertionError: No successful 'transferADA' log found\nE           assert False\nE            +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7f4386378740>)\n\ntest_cases/test_agent_functions.py:6: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cases.test_agent_functions.TestAgentFunctionExecution object at 0x7f43869834d0>\nrun_admin_agent_fixture = <Response [200]>\nautonomous_agent_api = <lib.autonomous_agent_api.AutonomousAgentApi object at 0x7f4386b9bbc0>\n\n    @allure.sub_suite(\"CRON\")\n    @allure.title(\"Test Cron Transfer ADA Logs\")\n    @allure.feature(\"Transfer Ada Cron Function\")\n    def test_cron_transfer_ada_logs(\n        self, run_admin_agent_fixture, autonomous_agent_api\n    ):\n        agent_id = run_admin_agent_fixture.json().get(\"id\")\n        logs = (\n            autonomous_agent_api.get_trigger_history(\n                param=f\"?agent_id={agent_id}&functionName={'transferADA'}\"\n            )\n            .json()\n            .get(\"items\")\n        )\n>       assert_successful_log(\n            logs,\n            function_name=\"transferADA\",\n            trigger_type=\"CRON\",\n            message=\"No successful 'transferADA' log found\",\n        )\n\ntest_cases/test_agent_functions.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlogs = [], function_name = 'transferADA', trigger_type = 'CRON'\nmessage = \"No successful 'transferADA' log found\"\n\n    def assert_successful_log(logs, function_name, trigger_type, message):\n        try:\n            assert any(\n                log[\"functionName\"] == function_name\n                and log[\"triggerType\"] == trigger_type\n                and log[\"status\"] is True\n                and log[\"success\"] is True\n                for log in logs\n            ), message\n        except AssertionError:\n            failed_logs = [log for log in logs if log[\"functionName\"] == function_name]\n    \n            if failed_logs:\n                allure.attach(\n                    str(failed_logs),\n                    name=\"Filtered Logs with Matching Function Name\",\n                    attachment_type=allure.attachment_type.JSON,\n                )\n            else:\n                allure.attach(\n                    \"No log found with the given parameters.\",\n                    name=\"No Matching Logs\",\n                    attachment_type=allure.attachment_type.TEXT,\n                )\n>           raise AssertionError(\n                f\"{message} | Failed Logs: {failed_logs if failed_logs else 'None'}\"\n            )\nE           AssertionError: No successful 'transferADA' log found | Failed Logs: None\n\ntest_cases/test_agent_functions.py:28: AssertionError","steps":[],"attachments":[{"uid":"10dea7363e9641c4","name":"No Matching Logs","source":"10dea7363e9641c4.txt","type":"text/plain","size":39}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"autonomous_agent_api::0","time":{"start":1725869819634,"stop":1725869819634,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"subSuite","value":"CRON"},{"name":"parentSuite","value":"Agent Function Execution"},{"name":"feature","value":"Transfer Ada Cron Function"},{"name":"suite","value":"test_agent_functions"},{"name":"host","value":"fv-az1776-218"},{"name":"thread","value":"1919-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_agent_functions"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":9,"unknown":0,"total":13},"items":[{"uid":"ebacf9c4a7a7f8dc","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/11//#testresult/ebacf9c4a7a7f8dc","status":"passed","time":{"start":1725616132262,"stop":1725616132497,"duration":235}},{"uid":"d2b4bf0dd53cc807","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/10//#testresult/d2b4bf0dd53cc807","status":"failed","statusDetails":"AssertionError: No successful 'transferADA' log found | Failed Logs: [{'agentId': '1ea877da-ef44-4e46-b914-b28f27f6ee29', 'functionName': 'transferADA', 'status': False, 'success': False, 'timestamp': '2024-09-06T09:36:00.614000+00:00', 'message': '', 'triggerType': 'CRON', 'txHash': None}, {'agentId': '1ea877da-ef44-4e46-b914-b28f27f6ee29', 'functionName': 'transferADA', 'status': False, 'success': False, 'timestamp': '2024-09-06T09:35:00.557000+00:00', 'message': '', 'triggerType': 'CRON', 'txHash': None}, {'agentId': '1ea877da-ef44-4e46-b914-b28f27f6ee29', 'functionName': 'transferADA', 'status': False, 'success': False, 'timestamp': '2024-09-06T09:34:00.501000+00:00', 'message': '', 'triggerType': 'CRON', 'txHash': None}]","time":{"start":1725615363214,"stop":1725615363498,"duration":284}},{"uid":"acd4eae29a717ae9","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/9//#testresult/acd4eae29a717ae9","status":"passed","time":{"start":1725615331637,"stop":1725615331926,"duration":289}},{"uid":"b61f59d1a7fb6cb6","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/8//#testresult/b61f59d1a7fb6cb6","status":"failed","statusDetails":"AssertionError: No successful 'transferADA' log found | Failed Logs: [{'agentId': '9c3de914-fb22-4841-8dec-c40704fd1ca8', 'functionName': 'transferADA', 'status': True, 'success': False, 'timestamp': '2024-08-20T06:28:00.881000+00:00', 'message': 'KubærApi [Status 400] : ShelleyTxValidationError ShelleyBasedEraConway (ApplyTxError (ConwayUtxowFailure (UtxoFailure (ValueNotConservedUTxO (MaryValue (Coin 0) (MultiAsset (fromList []))) (MaryValue (Coin 99499640662) (MultiAsset (fromList []))))) :| [ConwayUtxowFailure (UtxoFailure (BadInputsUTxO (fromList [TxIn (TxId {unTxId = SafeHash \"deb2dfe0e755018cbf3b05114734795c1912ee957859d152e9e389f9654cc9a8\"}) (TxIx {unTxIx = 0})])))]))', 'triggerType': 'CRON', 'txHash': None}, {'agentId': '9c3de914-fb22-4841-8dec-c40704fd1ca8', 'functionName': 'transferADA', 'status': True, 'success': False, 'timestamp': '2024-08-20T06:27:55.020000+00:00', 'message': 'KubærApi [Status 400] : ShelleyTxValidationError ShelleyBasedEraConway (ApplyTxError (ConwayUtxowFailure (UtxoFailure (ValueNotConservedUTxO (MaryValue (Coin 0) (MultiAsset (fromList []))) (MaryValue (Coin 99499640662) (MultiAsset (fromList []))))) :| [ConwayUtxowFailure (UtxoFailure (BadInputsUTxO (fromList [TxIn (TxId {unTxId = SafeHash \"deb2dfe0e755018cbf3b05114734795c1912ee957859d152e9e389f9654cc9a8\"}) (TxIx {unTxIx = 0})])))]))', 'triggerType': 'CRON', 'txHash': None}]","time":{"start":1724135314805,"stop":1724135315013,"duration":208}},{"uid":"e7355ee97a78256d","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/7//#testresult/e7355ee97a78256d","status":"passed","time":{"start":1724134686546,"stop":1724134686793,"duration":247}},{"uid":"9e842cf2edd9fc16","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/6//#testresult/9e842cf2edd9fc16","status":"passed","time":{"start":1724133854502,"stop":1724133854787,"duration":285}},{"uid":"dfe6edb38ddd4ce","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/5//#testresult/dfe6edb38ddd4ce","status":"passed","time":{"start":1724132698255,"stop":1724132698750,"duration":495}},{"uid":"ee9731a6d3bd755f","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/4//#testresult/ee9731a6d3bd755f","status":"passed","time":{"start":1723720438136,"stop":1723720438371,"duration":235}},{"uid":"b55ecb11810a91ed","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/3//#testresult/b55ecb11810a91ed","status":"failed","statusDetails":"AssertionError: No successful 'transferADA' log found\nassert False\n +  where False = any(<generator object assert_successful_log.<locals>.<genexpr> at 0x7f34f558c660>)","time":{"start":1723719852959,"stop":1723719853230,"duration":271}},{"uid":"44a552622382de50","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/2//#testresult/44a552622382de50","status":"passed","time":{"start":1723717604836,"stop":1723717605115,"duration":279}},{"uid":"bc4bed9cde525f35","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/1//#testresult/bc4bed9cde525f35","status":"passed","time":{"start":1723716845603,"stop":1723716845901,"duration":298}},{"uid":"58ba080f5245e4bd","reportUrl":"https://cardanoapi.github.io/autonomous-agents/test_backend_allure_report/1//#testresult/58ba080f5245e4bd","status":"passed","time":{"start":1723716209364,"stop":1723716209646,"duration":282}}]},"tags":[]},"source":"1296a690f177340a.json","parameterValues":[]}